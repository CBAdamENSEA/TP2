
TP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004434  08004434  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800443c  0800443c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08004444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000088  080044cc  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080044cc  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c0a  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d3  00000000  00000000  00032cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  00035098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00035dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269b9  00000000  00000000  00036a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115bc  00000000  00000000  0005d3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0216  00000000  00000000  0006e975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015eb8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ec  00000000  00000000  0015ebe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080043a8 	.word	0x080043a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080043a8 	.word	0x080043a8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96e 	b.w	80005c4 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	468c      	mov	ip, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8083 	bne.w	8000416 <__udivmoddi4+0x116>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d947      	bls.n	80003a6 <__udivmoddi4+0xa6>
 8000316:	fab2 f282 	clz	r2, r2
 800031a:	b142      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031c:	f1c2 0020 	rsb	r0, r2, #32
 8000320:	fa24 f000 	lsr.w	r0, r4, r0
 8000324:	4091      	lsls	r1, r2
 8000326:	4097      	lsls	r7, r2
 8000328:	ea40 0c01 	orr.w	ip, r0, r1
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbbc f6f8 	udiv	r6, ip, r8
 8000338:	fa1f fe87 	uxth.w	lr, r7
 800033c:	fb08 c116 	mls	r1, r8, r6, ip
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb06 f10e 	mul.w	r1, r6, lr
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000352:	f080 8119 	bcs.w	8000588 <__udivmoddi4+0x288>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8116 	bls.w	8000588 <__udivmoddi4+0x288>
 800035c:	3e02      	subs	r6, #2
 800035e:	443b      	add	r3, r7
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0f8 	udiv	r0, r3, r8
 8000368:	fb08 3310 	mls	r3, r8, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45a6      	cmp	lr, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	193c      	adds	r4, r7, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8105 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f240 8102 	bls.w	800058c <__udivmoddi4+0x28c>
 8000388:	3802      	subs	r0, #2
 800038a:	443c      	add	r4, r7
 800038c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	2600      	movs	r6, #0
 8000396:	b11d      	cbz	r5, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c5 4300 	strd	r4, r3, [r5]
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b902      	cbnz	r2, 80003aa <__udivmoddi4+0xaa>
 80003a8:	deff      	udf	#255	; 0xff
 80003aa:	fab2 f282 	clz	r2, r2
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d150      	bne.n	8000454 <__udivmoddi4+0x154>
 80003b2:	1bcb      	subs	r3, r1, r7
 80003b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	2601      	movs	r6, #1
 80003be:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c2:	0c21      	lsrs	r1, r4, #16
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb08 f30c 	mul.w	r3, r8, ip
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0xe4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0xe2>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f200 80e9 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1ac9      	subs	r1, r1, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x10c>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x10a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80d9 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e7bf      	b.n	8000396 <__udivmoddi4+0x96>
 8000416:	428b      	cmp	r3, r1
 8000418:	d909      	bls.n	800042e <__udivmoddi4+0x12e>
 800041a:	2d00      	cmp	r5, #0
 800041c:	f000 80b1 	beq.w	8000582 <__udivmoddi4+0x282>
 8000420:	2600      	movs	r6, #0
 8000422:	e9c5 0100 	strd	r0, r1, [r5]
 8000426:	4630      	mov	r0, r6
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	fab3 f683 	clz	r6, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d14a      	bne.n	80004cc <__udivmoddi4+0x1cc>
 8000436:	428b      	cmp	r3, r1
 8000438:	d302      	bcc.n	8000440 <__udivmoddi4+0x140>
 800043a:	4282      	cmp	r2, r0
 800043c:	f200 80b8 	bhi.w	80005b0 <__udivmoddi4+0x2b0>
 8000440:	1a84      	subs	r4, r0, r2
 8000442:	eb61 0103 	sbc.w	r1, r1, r3
 8000446:	2001      	movs	r0, #1
 8000448:	468c      	mov	ip, r1
 800044a:	2d00      	cmp	r5, #0
 800044c:	d0a8      	beq.n	80003a0 <__udivmoddi4+0xa0>
 800044e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f603 	lsr.w	r6, r0, r3
 800045c:	4097      	lsls	r7, r2
 800045e:	fa01 f002 	lsl.w	r0, r1, r2
 8000462:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000466:	40d9      	lsrs	r1, r3
 8000468:	4330      	orrs	r0, r6
 800046a:	0c03      	lsrs	r3, r0, #16
 800046c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000470:	fa1f f887 	uxth.w	r8, r7
 8000474:	fb0e 1116 	mls	r1, lr, r6, r1
 8000478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047c:	fb06 f108 	mul.w	r1, r6, r8
 8000480:	4299      	cmp	r1, r3
 8000482:	fa04 f402 	lsl.w	r4, r4, r2
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x19c>
 8000488:	18fb      	adds	r3, r7, r3
 800048a:	f106 3cff 	add.w	ip, r6, #4294967295
 800048e:	f080 808d 	bcs.w	80005ac <__udivmoddi4+0x2ac>
 8000492:	4299      	cmp	r1, r3
 8000494:	f240 808a 	bls.w	80005ac <__udivmoddi4+0x2ac>
 8000498:	3e02      	subs	r6, #2
 800049a:	443b      	add	r3, r7
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b281      	uxth	r1, r0
 80004a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb00 f308 	mul.w	r3, r0, r8
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x1c4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ba:	d273      	bcs.n	80005a4 <__udivmoddi4+0x2a4>
 80004bc:	428b      	cmp	r3, r1
 80004be:	d971      	bls.n	80005a4 <__udivmoddi4+0x2a4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4439      	add	r1, r7
 80004c4:	1acb      	subs	r3, r1, r3
 80004c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ca:	e778      	b.n	80003be <__udivmoddi4+0xbe>
 80004cc:	f1c6 0c20 	rsb	ip, r6, #32
 80004d0:	fa03 f406 	lsl.w	r4, r3, r6
 80004d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004d8:	431c      	orrs	r4, r3
 80004da:	fa20 f70c 	lsr.w	r7, r0, ip
 80004de:	fa01 f306 	lsl.w	r3, r1, r6
 80004e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ea:	431f      	orrs	r7, r3
 80004ec:	0c3b      	lsrs	r3, r7, #16
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fa1f f884 	uxth.w	r8, r4
 80004f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000502:	458a      	cmp	sl, r1
 8000504:	fa02 f206 	lsl.w	r2, r2, r6
 8000508:	fa00 f306 	lsl.w	r3, r0, r6
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x220>
 800050e:	1861      	adds	r1, r4, r1
 8000510:	f109 30ff 	add.w	r0, r9, #4294967295
 8000514:	d248      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 8000516:	458a      	cmp	sl, r1
 8000518:	d946      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800051a:	f1a9 0902 	sub.w	r9, r9, #2
 800051e:	4421      	add	r1, r4
 8000520:	eba1 010a 	sub.w	r1, r1, sl
 8000524:	b2bf      	uxth	r7, r7
 8000526:	fbb1 f0fe 	udiv	r0, r1, lr
 800052a:	fb0e 1110 	mls	r1, lr, r0, r1
 800052e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000532:	fb00 f808 	mul.w	r8, r0, r8
 8000536:	45b8      	cmp	r8, r7
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x24a>
 800053a:	19e7      	adds	r7, r4, r7
 800053c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000540:	d22e      	bcs.n	80005a0 <__udivmoddi4+0x2a0>
 8000542:	45b8      	cmp	r8, r7
 8000544:	d92c      	bls.n	80005a0 <__udivmoddi4+0x2a0>
 8000546:	3802      	subs	r0, #2
 8000548:	4427      	add	r7, r4
 800054a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800054e:	eba7 0708 	sub.w	r7, r7, r8
 8000552:	fba0 8902 	umull	r8, r9, r0, r2
 8000556:	454f      	cmp	r7, r9
 8000558:	46c6      	mov	lr, r8
 800055a:	4649      	mov	r1, r9
 800055c:	d31a      	bcc.n	8000594 <__udivmoddi4+0x294>
 800055e:	d017      	beq.n	8000590 <__udivmoddi4+0x290>
 8000560:	b15d      	cbz	r5, 800057a <__udivmoddi4+0x27a>
 8000562:	ebb3 020e 	subs.w	r2, r3, lr
 8000566:	eb67 0701 	sbc.w	r7, r7, r1
 800056a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800056e:	40f2      	lsrs	r2, r6
 8000570:	ea4c 0202 	orr.w	r2, ip, r2
 8000574:	40f7      	lsrs	r7, r6
 8000576:	e9c5 2700 	strd	r2, r7, [r5]
 800057a:	2600      	movs	r6, #0
 800057c:	4631      	mov	r1, r6
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e70b      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0x60>
 800058c:	4618      	mov	r0, r3
 800058e:	e6fd      	b.n	800038c <__udivmoddi4+0x8c>
 8000590:	4543      	cmp	r3, r8
 8000592:	d2e5      	bcs.n	8000560 <__udivmoddi4+0x260>
 8000594:	ebb8 0e02 	subs.w	lr, r8, r2
 8000598:	eb69 0104 	sbc.w	r1, r9, r4
 800059c:	3801      	subs	r0, #1
 800059e:	e7df      	b.n	8000560 <__udivmoddi4+0x260>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e7d2      	b.n	800054a <__udivmoddi4+0x24a>
 80005a4:	4660      	mov	r0, ip
 80005a6:	e78d      	b.n	80004c4 <__udivmoddi4+0x1c4>
 80005a8:	4681      	mov	r9, r0
 80005aa:	e7b9      	b.n	8000520 <__udivmoddi4+0x220>
 80005ac:	4666      	mov	r6, ip
 80005ae:	e775      	b.n	800049c <__udivmoddi4+0x19c>
 80005b0:	4630      	mov	r0, r6
 80005b2:	e74a      	b.n	800044a <__udivmoddi4+0x14a>
 80005b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b8:	4439      	add	r1, r7
 80005ba:	e713      	b.n	80003e4 <__udivmoddi4+0xe4>
 80005bc:	3802      	subs	r0, #2
 80005be:	443c      	add	r4, r7
 80005c0:	e724      	b.n	800040c <__udivmoddi4+0x10c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b2e      	ldr	r3, [pc, #184]	; (8000698 <MX_GPIO_Init+0xd0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <MX_GPIO_Init+0xd0>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <MX_GPIO_Init+0xd0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_GPIO_Init+0xd0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a27      	ldr	r2, [pc, #156]	; (8000698 <MX_GPIO_Init+0xd0>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_GPIO_Init+0xd0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a21      	ldr	r2, [pc, #132]	; (8000698 <MX_GPIO_Init+0xd0>)
 8000614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_GPIO_Init+0xd0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_GPIO_Init+0xd0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_GPIO_Init+0xd0>)
 800062c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b19      	ldr	r3, [pc, #100]	; (8000698 <MX_GPIO_Init+0xd0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2102      	movs	r1, #2
 8000642:	4816      	ldr	r0, [pc, #88]	; (800069c <MX_GPIO_Init+0xd4>)
 8000644:	f000 fed4 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000648:	2302      	movs	r3, #2
 800064a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <MX_GPIO_Init+0xd4>)
 8000660:	f000 fd02 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton_Pin;
 8000664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bouton_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	4808      	ldr	r0, [pc, #32]	; (800069c <MX_GPIO_Init+0xd4>)
 800067c:	f000 fcf4 	bl	8001068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000680:	2200      	movs	r2, #0
 8000682:	2100      	movs	r1, #0
 8000684:	2028      	movs	r0, #40	; 0x28
 8000686:	f000 fcb8 	bl	8000ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800068a:	2028      	movs	r0, #40	; 0x28
 800068c:	f000 fcd1 	bl	8001032 <HAL_NVIC_EnableIRQ>

}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40022000 	.word	0x40022000

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int T_2=1000; // T_2 est la demi-période de clignotement
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fb6d 	bl	8000d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f80e 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f7ff ff88 	bl	80005c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006b8:	f000 fa1a 	bl	8000af0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80006bc:	f000 fa8a 	bl	8000bd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80006c0:	4802      	ldr	r0, [pc, #8]	; (80006cc <main+0x2c>)
 80006c2:	f001 fff3 	bl	80026ac <HAL_TIM_Base_Start_IT>
	  //HAL_UART_Receive(&huart1,&buffer, 1, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart1, buffer, 1, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart1, "\n", 1, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart1, "\r", 1, HAL_MAX_DELAY);
	  //printf("%d\n\r",buffer);
	  shell();
 80006c6:	f000 f8b7 	bl	8000838 <shell>
 80006ca:	e7fc      	b.n	80006c6 <main+0x26>
 80006cc:	200000f4 	.word	0x200000f4

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	; 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 0320 	add.w	r3, r7, #32
 80006da:	2230      	movs	r2, #48	; 0x30
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fa2c 	bl	8003b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <SystemClock_Config+0xd0>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <SystemClock_Config+0xd0>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xd0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a24      	ldr	r2, [pc, #144]	; (80007a4 <SystemClock_Config+0xd4>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800073c:	23d8      	movs	r3, #216	; 0xd8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 feeb 	bl	8001528 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000758:	f000 f868 	bl	800082c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800075c:	f000 fe94 	bl	8001488 <HAL_PWREx_EnableOverDrive>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000766:	f000 f861 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2107      	movs	r1, #7
 8000788:	4618      	mov	r0, r3
 800078a:	f001 f971 	bl	8001a70 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000794:	f000 f84a 	bl	800082c <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Bouton_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007b8:	d113      	bne.n	80007e2 <HAL_GPIO_EXTI_Callback+0x3a>
	    {
			TIM2->PSC=freq_tab[i];
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80007c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c8:	629a      	str	r2, [r3, #40]	; 0x28
			i++;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80007d2:	6013      	str	r3, [r2, #0]
			if (i>3)
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	dd02      	ble.n	80007e2 <HAL_GPIO_EXTI_Callback+0x3a>
			{
				i=0;
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x48>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
			}
	    	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Toggle The Output (LED) Pin
	    }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200000a4 	.word	0x200000a4
 80007f4:	20000000 	.word	0x20000000

080007f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim2 )
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d107      	bne.n	8000818 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if(state==LED_TOGGLE)
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b03      	cmp	r3, #3
 800080e:	d103      	bne.n	8000818 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000810:	2102      	movs	r1, #2
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000814:	f000 fe05 	bl	8001422 <HAL_GPIO_TogglePin>
		}
	}
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000f4 	.word	0x200000f4
 8000824:	200000a8 	.word	0x200000a8
 8000828:	40022000 	.word	0x40022000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <shell>:
char RX_buffer[50];
int reading=1;
char state_msg[3];

void shell(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
	int buffer_size=0;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
	int i=0;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
	char reference_buffer[]="LED_ON";
 8000846:	4a49      	ldr	r2, [pc, #292]	; (800096c <shell+0x134>)
 8000848:	463b      	mov	r3, r7
 800084a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800084e:	6018      	str	r0, [r3, #0]
 8000850:	3304      	adds	r3, #4
 8000852:	8019      	strh	r1, [r3, #0]
 8000854:	3302      	adds	r3, #2
 8000856:	0c0a      	lsrs	r2, r1, #16
 8000858:	701a      	strb	r2, [r3, #0]
	while(shell_on)
 800085a:	e07d      	b.n	8000958 <shell+0x120>
	{
		buffer_size=0;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
		while(reading)
 8000860:	e02a      	b.n	80008b8 <shell+0x80>
		{
			HAL_UART_Receive(&huart1,&RX_ch_buffer, 1, HAL_MAX_DELAY);
 8000862:	f04f 33ff 	mov.w	r3, #4294967295
 8000866:	2201      	movs	r2, #1
 8000868:	4941      	ldr	r1, [pc, #260]	; (8000970 <shell+0x138>)
 800086a:	4842      	ldr	r0, [pc, #264]	; (8000974 <shell+0x13c>)
 800086c:	f002 fc6f 	bl	800314e <HAL_UART_Receive>
			HAL_UART_Transmit(&huart1, &RX_ch_buffer, 1, HAL_MAX_DELAY);
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2201      	movs	r2, #1
 8000876:	493e      	ldr	r1, [pc, #248]	; (8000970 <shell+0x138>)
 8000878:	483e      	ldr	r0, [pc, #248]	; (8000974 <shell+0x13c>)
 800087a:	f002 fbd5 	bl	8003028 <HAL_UART_Transmit>
			RX_buffer[buffer_size]=RX_ch_buffer;
 800087e:	4b3c      	ldr	r3, [pc, #240]	; (8000970 <shell+0x138>)
 8000880:	7819      	ldrb	r1, [r3, #0]
 8000882:	4a3d      	ldr	r2, [pc, #244]	; (8000978 <shell+0x140>)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	460a      	mov	r2, r1
 800088a:	701a      	strb	r2, [r3, #0]
			buffer_size++;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
			if (RX_ch_buffer==13)
 8000892:	4b37      	ldr	r3, [pc, #220]	; (8000970 <shell+0x138>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b0d      	cmp	r3, #13
 8000898:	d10e      	bne.n	80008b8 <shell+0x80>
			{
				RX_buffer[buffer_size-1]='\0';
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	3b01      	subs	r3, #1
 800089e:	4a36      	ldr	r2, [pc, #216]	; (8000978 <shell+0x140>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&huart1, "\n\r", 2, HAL_MAX_DELAY);
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	2202      	movs	r2, #2
 80008aa:	4934      	ldr	r1, [pc, #208]	; (800097c <shell+0x144>)
 80008ac:	4831      	ldr	r0, [pc, #196]	; (8000974 <shell+0x13c>)
 80008ae:	f002 fbbb 	bl	8003028 <HAL_UART_Transmit>
				//HAL_UART_Transmit(&huart1, RX_buffer, buffer_size, HAL_MAX_DELAY);
				reading=0;
 80008b2:	4b33      	ldr	r3, [pc, #204]	; (8000980 <shell+0x148>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
		while(reading)
 80008b8:	4b31      	ldr	r3, [pc, #196]	; (8000980 <shell+0x148>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1d0      	bne.n	8000862 <shell+0x2a>
			}
		}

		if (strcmp(RX_buffer,"LED_ON")==0)
 80008c0:	492a      	ldr	r1, [pc, #168]	; (800096c <shell+0x134>)
 80008c2:	482d      	ldr	r0, [pc, #180]	; (8000978 <shell+0x140>)
 80008c4:	f7ff fca4 	bl	8000210 <strcmp>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10f      	bne.n	80008ee <shell+0xb6>
		{
			state=LED_ON;
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <shell+0x14c>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==GPIO_PIN_RESET)
 80008d4:	2102      	movs	r1, #2
 80008d6:	482c      	ldr	r0, [pc, #176]	; (8000988 <shell+0x150>)
 80008d8:	f000 fd72 	bl	80013c0 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d126      	bne.n	8000930 <shell+0xf8>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2102      	movs	r1, #2
 80008e6:	4828      	ldr	r0, [pc, #160]	; (8000988 <shell+0x150>)
 80008e8:	f000 fd82 	bl	80013f0 <HAL_GPIO_WritePin>
 80008ec:	e020      	b.n	8000930 <shell+0xf8>
			}
		}
		else if (strcmp(RX_buffer,"LED_OFF")==0)
 80008ee:	4927      	ldr	r1, [pc, #156]	; (800098c <shell+0x154>)
 80008f0:	4821      	ldr	r0, [pc, #132]	; (8000978 <shell+0x140>)
 80008f2:	f7ff fc8d 	bl	8000210 <strcmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10f      	bne.n	800091c <shell+0xe4>
		{
			state=LED_OFF;
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <shell+0x14c>)
 80008fe:	2202      	movs	r2, #2
 8000900:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==GPIO_PIN_SET)
 8000902:	2102      	movs	r1, #2
 8000904:	4820      	ldr	r0, [pc, #128]	; (8000988 <shell+0x150>)
 8000906:	f000 fd5b 	bl	80013c0 <HAL_GPIO_ReadPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b01      	cmp	r3, #1
 800090e:	d10f      	bne.n	8000930 <shell+0xf8>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2102      	movs	r1, #2
 8000914:	481c      	ldr	r0, [pc, #112]	; (8000988 <shell+0x150>)
 8000916:	f000 fd6b 	bl	80013f0 <HAL_GPIO_WritePin>
 800091a:	e009      	b.n	8000930 <shell+0xf8>
			}
		}

		else if (strcmp(RX_buffer,"LED_TOGGLE")==0)
 800091c:	491c      	ldr	r1, [pc, #112]	; (8000990 <shell+0x158>)
 800091e:	4816      	ldr	r0, [pc, #88]	; (8000978 <shell+0x140>)
 8000920:	f7ff fc76 	bl	8000210 <strcmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <shell+0xf8>
		{
			state=LED_TOGGLE;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <shell+0x14c>)
 800092c:	2203      	movs	r2, #3
 800092e:	601a      	str	r2, [r3, #0]
		}
		sprintf(state_msg,"%d\n\r",strcmp(RX_buffer,"LED_ON"));
 8000930:	490e      	ldr	r1, [pc, #56]	; (800096c <shell+0x134>)
 8000932:	4811      	ldr	r0, [pc, #68]	; (8000978 <shell+0x140>)
 8000934:	f7ff fc6c 	bl	8000210 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4915      	ldr	r1, [pc, #84]	; (8000994 <shell+0x15c>)
 800093e:	4816      	ldr	r0, [pc, #88]	; (8000998 <shell+0x160>)
 8000940:	f003 f904 	bl	8003b4c <siprintf>
		//HAL_UART_Transmit(&huart1, RX_buffer, buffer_size, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart1, state_msg, 5, HAL_MAX_DELAY);
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	2205      	movs	r2, #5
 800094a:	4913      	ldr	r1, [pc, #76]	; (8000998 <shell+0x160>)
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <shell+0x13c>)
 800094e:	f002 fb6b 	bl	8003028 <HAL_UART_Transmit>
		reading=1;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <shell+0x148>)
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]
	while(shell_on)
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <shell+0x164>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	f47f af7d 	bne.w	800085c <shell+0x24>

	}
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	080043c4 	.word	0x080043c4
 8000970:	200000b8 	.word	0x200000b8
 8000974:	20000140 	.word	0x20000140
 8000978:	200000bc 	.word	0x200000bc
 800097c:	080043c0 	.word	0x080043c0
 8000980:	20000014 	.word	0x20000014
 8000984:	200000a8 	.word	0x200000a8
 8000988:	40022000 	.word	0x40022000
 800098c:	080043cc 	.word	0x080043cc
 8000990:	080043d4 	.word	0x080043d4
 8000994:	080043e0 	.word	0x080043e0
 8000998:	200000f0 	.word	0x200000f0
 800099c:	20000010 	.word	0x20000010

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_MspInit+0x44>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_MspInit+0x44>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x44>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x44>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f9e6 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <TIM2_IRQHandler+0x10>)
 8000a42:	f001 feab 	bl	800279c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000f4 	.word	0x200000f4

08000a50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton_Pin);
 8000a54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a58:	f000 fcfe 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f003 f82a 	bl	8003ae8 <__errno>
 8000a94:	4603      	mov	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20050000 	.word	0x20050000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	200000ac 	.word	0x200000ac
 8000ac8:	200001d8 	.word	0x200001d8

08000acc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10799;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b26:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b3a:	f001 fd5f 	bl	80025fc <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b44:	f7ff fe72 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4619      	mov	r1, r3
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b56:	f001 ff41 	bl	80029dc <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b60:	f7ff fe64 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_TIM2_Init+0x98>)
 8000b72:	f002 f95f 	bl	8002e34 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b7c:	f7ff fe56 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3720      	adds	r7, #32
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200000f4 	.word	0x200000f4

08000b8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b9c:	d113      	bne.n	8000bc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_TIM_Base_MspInit+0x44>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <HAL_TIM_Base_MspInit+0x44>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_TIM_Base_MspInit+0x44>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	201c      	movs	r0, #28
 8000bbc:	f000 fa1d 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bc0:	201c      	movs	r0, #28
 8000bc2:	f000 fa36 	bl	8001032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <MX_USART1_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART1_UART_Init+0x58>)
 8000c18:	f002 f9b8 	bl	8002f8c <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f7ff fe03 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000140 	.word	0x20000140
 8000c30:	40011000 	.word	0x40011000

08000c34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b0ac      	sub	sp, #176	; 0xb0
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	2284      	movs	r2, #132	; 0x84
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 ff71 	bl	8003b3c <memset>
  if(uartHandle->Instance==USART1)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a32      	ldr	r2, [pc, #200]	; (8000d28 <HAL_UART_MspInit+0xf4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d15c      	bne.n	8000d1e <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c64:	2340      	movs	r3, #64	; 0x40
 8000c66:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 f8d3 	bl	8001e1c <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c7c:	f7ff fdd6 	bl	800082c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c86:	f043 0310 	orr.w	r3, r3, #16
 8000c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8c:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb4:	4a1d      	ldr	r2, [pc, #116]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_UART_MspInit+0xf8>)
 8000cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cea:	4619      	mov	r1, r3
 8000cec:	4810      	ldr	r0, [pc, #64]	; (8000d30 <HAL_UART_MspInit+0xfc>)
 8000cee:	f000 f9bb 	bl	8001068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <HAL_UART_MspInit+0x100>)
 8000d1a:	f000 f9a5 	bl	8001068 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d1e:	bf00      	nop
 8000d20:	37b0      	adds	r7, #176	; 0xb0
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40020000 	.word	0x40020000

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d62:	f7ff feb3 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f002 fec5 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fc99 	bl	80006a0 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d7c:	08004444 	.word	0x08004444
  ldr r2, =_sbss
 8000d80:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000d84:	200001d8 	.word	0x200001d8

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>

08000d8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f000 f928 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f805 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9a:	f7ff fe01 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f943 	bl	800104e <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f90b 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000018 	.word	0x20000018
 8000dfc:	20000020 	.word	0x20000020
 8000e00:	2000001c 	.word	0x2000001c

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000020 	.word	0x20000020
 8000e28:	200001c4 	.word	0x200001c4

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	200001c4 	.word	0x200001c4

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <__NVIC_SetPriorityGrouping+0x40>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x40>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	05fa0000 	.word	0x05fa0000

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	; (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e175      	b.n	8001374 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8164 	bne.w	800136e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x56>
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80be 	beq.w	800136e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b66      	ldr	r3, [pc, #408]	; (800138c <HAL_GPIO_Init+0x324>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a65      	ldr	r2, [pc, #404]	; (800138c <HAL_GPIO_Init+0x324>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b63      	ldr	r3, [pc, #396]	; (800138c <HAL_GPIO_Init+0x324>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800120a:	4a61      	ldr	r2, [pc, #388]	; (8001390 <HAL_GPIO_Init+0x328>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a58      	ldr	r2, [pc, #352]	; (8001394 <HAL_GPIO_Init+0x32c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d037      	beq.n	80012a6 <HAL_GPIO_Init+0x23e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a57      	ldr	r2, [pc, #348]	; (8001398 <HAL_GPIO_Init+0x330>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d031      	beq.n	80012a2 <HAL_GPIO_Init+0x23a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a56      	ldr	r2, [pc, #344]	; (800139c <HAL_GPIO_Init+0x334>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_Init+0x236>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a55      	ldr	r2, [pc, #340]	; (80013a0 <HAL_GPIO_Init+0x338>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x232>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a54      	ldr	r2, [pc, #336]	; (80013a4 <HAL_GPIO_Init+0x33c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x22e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a53      	ldr	r2, [pc, #332]	; (80013a8 <HAL_GPIO_Init+0x340>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x22a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	; (80013ac <HAL_GPIO_Init+0x344>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x226>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <HAL_GPIO_Init+0x348>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x222>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a50      	ldr	r2, [pc, #320]	; (80013b4 <HAL_GPIO_Init+0x34c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x21e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	; (80013b8 <HAL_GPIO_Init+0x350>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x21a>
 800127e:	2309      	movs	r3, #9
 8001280:	e012      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 8001282:	230a      	movs	r3, #10
 8001284:	e010      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 8001286:	2308      	movs	r3, #8
 8001288:	e00e      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 800128a:	2307      	movs	r3, #7
 800128c:	e00c      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 800128e:	2306      	movs	r3, #6
 8001290:	e00a      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 8001292:	2305      	movs	r3, #5
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 8001296:	2304      	movs	r3, #4
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x240>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_GPIO_Init+0x328>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <HAL_GPIO_Init+0x354>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ea:	4a34      	ldr	r2, [pc, #208]	; (80013bc <HAL_GPIO_Init+0x354>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f0:	4b32      	ldr	r3, [pc, #200]	; (80013bc <HAL_GPIO_Init+0x354>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001314:	4a29      	ldr	r2, [pc, #164]	; (80013bc <HAL_GPIO_Init+0x354>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <HAL_GPIO_Init+0x354>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800133e:	4a1f      	ldr	r2, [pc, #124]	; (80013bc <HAL_GPIO_Init+0x354>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001344:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_GPIO_Init+0x354>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_GPIO_Init+0x354>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f ae86 	bls.w	8001088 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40013800 	.word	0x40013800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020c00 	.word	0x40020c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40021400 	.word	0x40021400
 80013ac:	40021800 	.word	0x40021800
 80013b0:	40021c00 	.word	0x40021c00
 80013b4:	40022000 	.word	0x40022000
 80013b8:	40022400 	.word	0x40022400
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	619a      	str	r2, [r3, #24]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001434:	887a      	ldrh	r2, [r7, #2]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4013      	ands	r3, r2
 800143a:	041a      	lsls	r2, r3, #16
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	43d9      	mvns	r1, r3
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	400b      	ands	r3, r1
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	619a      	str	r2, [r3, #24]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f996 	bl	80007a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b23      	ldr	r3, [pc, #140]	; (8001520 <HAL_PWREx_EnableOverDrive+0x98>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_PWREx_EnableOverDrive+0x98>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <HAL_PWREx_EnableOverDrive+0x98>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014aa:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b6:	f7ff fcb9 	bl	8000e2c <HAL_GetTick>
 80014ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014bc:	e009      	b.n	80014d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014be:	f7ff fcb5 	bl	8000e2c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014cc:	d901      	bls.n	80014d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e022      	b.n	8001518 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014de:	d1ee      	bne.n	80014be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ec:	f7ff fc9e 	bl	8000e2c <HAL_GetTick>
 80014f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014f2:	e009      	b.n	8001508 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014f4:	f7ff fc9a 	bl	8000e2c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001502:	d901      	bls.n	8001508 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e007      	b.n	8001518 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_PWREx_EnableOverDrive+0x9c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001514:	d1ee      	bne.n	80014f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40007000 	.word	0x40007000

08001528 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e291      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8087 	beq.w	800165a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800154c:	4b96      	ldr	r3, [pc, #600]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b04      	cmp	r3, #4
 8001556:	d00c      	beq.n	8001572 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001558:	4b93      	ldr	r3, [pc, #588]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d112      	bne.n	800158a <HAL_RCC_OscConfig+0x62>
 8001564:	4b90      	ldr	r3, [pc, #576]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001570:	d10b      	bne.n	800158a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001572:	4b8d      	ldr	r3, [pc, #564]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d06c      	beq.n	8001658 <HAL_RCC_OscConfig+0x130>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d168      	bne.n	8001658 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e26b      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x7a>
 8001594:	4b84      	ldr	r3, [pc, #528]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a83      	ldr	r2, [pc, #524]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 800159a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e02e      	b.n	8001600 <HAL_RCC_OscConfig+0xd8>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x9c>
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b7c      	ldr	r3, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7b      	ldr	r2, [pc, #492]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e01d      	b.n	8001600 <HAL_RCC_OscConfig+0xd8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0xc0>
 80015ce:	4b76      	ldr	r3, [pc, #472]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a75      	ldr	r2, [pc, #468]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b73      	ldr	r3, [pc, #460]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a72      	ldr	r2, [pc, #456]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0xd8>
 80015e8:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a6e      	ldr	r2, [pc, #440]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b6c      	ldr	r3, [pc, #432]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a6b      	ldr	r2, [pc, #428]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d013      	beq.n	8001630 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fc10 	bl	8000e2c <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fc0c 	bl	8000e2c <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e21f      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b61      	ldr	r3, [pc, #388]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0xe8>
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fbfc 	bl	8000e2c <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fbf8 	bl	8000e2c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e20b      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	4b57      	ldr	r3, [pc, #348]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0x110>
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d069      	beq.n	800173a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001666:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00b      	beq.n	800168a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001672:	4b4d      	ldr	r3, [pc, #308]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
 800167a:	2b08      	cmp	r3, #8
 800167c:	d11c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x190>
 800167e:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d116      	bne.n	80016b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_RCC_OscConfig+0x17a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e1df      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	493d      	ldr	r1, [pc, #244]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	e040      	b.n	800173a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d023      	beq.n	8001708 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c0:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a38      	ldr	r2, [pc, #224]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fbae 	bl	8000e2c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fbaa 	bl	8000e2c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1bd      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4929      	ldr	r1, [pc, #164]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
 8001706:	e018      	b.n	800173a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a26      	ldr	r2, [pc, #152]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fb8a 	bl	8000e2c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fb86 	bl	8000e2c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e199      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d038      	beq.n	80017b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d019      	beq.n	8001782 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001752:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fb67 	bl	8000e2c <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff fb63 	bl	8000e2c <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e176      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x23a>
 8001780:	e01a      	b.n	80017b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_RCC_OscConfig+0x280>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff fb4d 	bl	8000e2c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff fb49 	bl	8000e2c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d903      	bls.n	80017ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e15c      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
 80017a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ac:	4b91      	ldr	r3, [pc, #580]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ee      	bne.n	8001796 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a4 	beq.w	800190e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10d      	bne.n	80017ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a87      	ldr	r2, [pc, #540]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b85      	ldr	r3, [pc, #532]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ee:	4b82      	ldr	r3, [pc, #520]	; (80019f8 <HAL_RCC_OscConfig+0x4d0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017fa:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <HAL_RCC_OscConfig+0x4d0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a7e      	ldr	r2, [pc, #504]	; (80019f8 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001806:	f7ff fb11 	bl	8000e2c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff fb0d 	bl	8000e2c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	; 0x64
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e120      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001820:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <HAL_RCC_OscConfig+0x4d0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x31a>
 8001834:	4b6f      	ldr	r3, [pc, #444]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	4a6e      	ldr	r2, [pc, #440]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	; 0x70
 8001840:	e02d      	b.n	800189e <HAL_RCC_OscConfig+0x376>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x33c>
 800184a:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a69      	ldr	r2, [pc, #420]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	4b67      	ldr	r3, [pc, #412]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a66      	ldr	r2, [pc, #408]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
 8001862:	e01c      	b.n	800189e <HAL_RCC_OscConfig+0x376>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_OscConfig+0x35e>
 800186c:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a60      	ldr	r2, [pc, #384]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a5d      	ldr	r2, [pc, #372]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	e00b      	b.n	800189e <HAL_RCC_OscConfig+0x376>
 8001886:	4b5b      	ldr	r3, [pc, #364]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188a:	4a5a      	ldr	r2, [pc, #360]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6713      	str	r3, [r2, #112]	; 0x70
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001896:	4a57      	ldr	r2, [pc, #348]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d015      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fac1 	bl	8000e2c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fabd 	bl	8000e2c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e0ce      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ee      	beq.n	80018ae <HAL_RCC_OscConfig+0x386>
 80018d0:	e014      	b.n	80018fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff faab 	bl	8000e2c <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff faa7 	bl	8000e2c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e0b8      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ee      	bne.n	80018da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d105      	bne.n	800190e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	4a3b      	ldr	r2, [pc, #236]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80a4 	beq.w	8001a60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d06b      	beq.n	80019fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d149      	bne.n	80019c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192c:	4b31      	ldr	r3, [pc, #196]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a30      	ldr	r2, [pc, #192]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff fa78 	bl	8000e2c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff fa74 	bl	8000e2c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e087      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	019b      	lsls	r3, r3, #6
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	085b      	lsrs	r3, r3, #1
 8001976:	3b01      	subs	r3, #1
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	4313      	orrs	r3, r2
 8001984:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001986:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800198a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fa48 	bl	8000e2c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fa44 	bl	8000e2c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e057      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x478>
 80019be:	e04f      	b.n	8001a60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80019c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fa2e 	bl	8000e2c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fa2a 	bl	8000e2c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e03d      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4ac>
 80019f2:	e035      	b.n	8001a60 <HAL_RCC_OscConfig+0x538>
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_RCC_OscConfig+0x544>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d028      	beq.n	8001a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d121      	bne.n	8001a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d11a      	bne.n	8001a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d111      	bne.n	8001a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	085b      	lsrs	r3, r3, #1
 8001a44:	3b01      	subs	r3, #1
 8001a46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e000      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0d0      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b6a      	ldr	r3, [pc, #424]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d910      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 020f 	bic.w	r2, r3, #15
 8001a9e:	4965      	ldr	r1, [pc, #404]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0b8      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad0:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	494d      	ldr	r1, [pc, #308]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d040      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d115      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e07f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e073      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e06b      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4936      	ldr	r1, [pc, #216]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b64:	f7ff f962 	bl	8000e2c <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff f95e 	bl	8000e2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e053      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d210      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f023 020f 	bic.w	r2, r3, #15
 8001baa:	4922      	ldr	r1, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e032      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4916      	ldr	r1, [pc, #88]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	490e      	ldr	r1, [pc, #56]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c02:	f000 f821 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c06:	4602      	mov	r2, r0
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_ClockConfig+0x1c8>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	490a      	ldr	r1, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x1cc>)
 8001c14:	5ccb      	ldrb	r3, [r1, r3]
 8001c16:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1d0>)
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1d4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f8be 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	080043e8 	.word	0x080043e8
 8001c40:	20000018 	.word	0x20000018
 8001c44:	2000001c 	.word	0x2000001c

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6079      	str	r1, [r7, #4]
 8001c52:	2100      	movs	r1, #0
 8001c54:	60f9      	str	r1, [r7, #12]
 8001c56:	2100      	movs	r1, #0
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c5e:	4952      	ldr	r1, [pc, #328]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c60:	6889      	ldr	r1, [r1, #8]
 8001c62:	f001 010c 	and.w	r1, r1, #12
 8001c66:	2908      	cmp	r1, #8
 8001c68:	d00d      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x3e>
 8001c6a:	2908      	cmp	r1, #8
 8001c6c:	f200 8094 	bhi.w	8001d98 <HAL_RCC_GetSysClockFreq+0x150>
 8001c70:	2900      	cmp	r1, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x32>
 8001c74:	2904      	cmp	r1, #4
 8001c76:	d003      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x38>
 8001c78:	e08e      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_GetSysClockFreq+0x164>)
 8001c7c:	60bb      	str	r3, [r7, #8]
      break;
 8001c7e:	e08e      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c80:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c82:	60bb      	str	r3, [r7, #8]
      break;
 8001c84:	e08b      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c86:	4948      	ldr	r1, [pc, #288]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c88:	6849      	ldr	r1, [r1, #4]
 8001c8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001c8e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c90:	4945      	ldr	r1, [pc, #276]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c92:	6849      	ldr	r1, [r1, #4]
 8001c94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001c98:	2900      	cmp	r1, #0
 8001c9a:	d024      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9c:	4942      	ldr	r1, [pc, #264]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c9e:	6849      	ldr	r1, [r1, #4]
 8001ca0:	0989      	lsrs	r1, r1, #6
 8001ca2:	4608      	mov	r0, r1
 8001ca4:	f04f 0100 	mov.w	r1, #0
 8001ca8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001cac:	f04f 0500 	mov.w	r5, #0
 8001cb0:	ea00 0204 	and.w	r2, r0, r4
 8001cb4:	ea01 0305 	and.w	r3, r1, r5
 8001cb8:	493d      	ldr	r1, [pc, #244]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001cba:	fb01 f003 	mul.w	r0, r1, r3
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	fb01 f102 	mul.w	r1, r1, r2
 8001cc4:	1844      	adds	r4, r0, r1
 8001cc6:	493a      	ldr	r1, [pc, #232]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001cc8:	fba2 0101 	umull	r0, r1, r2, r1
 8001ccc:	1863      	adds	r3, r4, r1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	f7fe fafa 	bl	80002d0 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e04a      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b30      	ldr	r3, [pc, #192]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	461a      	mov	r2, r3
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	ea02 0400 	and.w	r4, r2, r0
 8001cfe:	ea03 0501 	and.w	r5, r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	014b      	lsls	r3, r1, #5
 8001d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d14:	0142      	lsls	r2, r0, #5
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	1b00      	subs	r0, r0, r4
 8001d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	018b      	lsls	r3, r1, #6
 8001d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d2e:	0182      	lsls	r2, r0, #6
 8001d30:	1a12      	subs	r2, r2, r0
 8001d32:	eb63 0301 	sbc.w	r3, r3, r1
 8001d36:	f04f 0000 	mov.w	r0, #0
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	00d9      	lsls	r1, r3, #3
 8001d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d44:	00d0      	lsls	r0, r2, #3
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	1912      	adds	r2, r2, r4
 8001d4c:	eb45 0303 	adc.w	r3, r5, r3
 8001d50:	f04f 0000 	mov.w	r0, #0
 8001d54:	f04f 0100 	mov.w	r1, #0
 8001d58:	0299      	lsls	r1, r3, #10
 8001d5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d5e:	0290      	lsls	r0, r2, #10
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	f7fe faae 	bl	80002d0 <__aeabi_uldivmod>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d94:	60bb      	str	r3, [r7, #8]
      break;
 8001d96:	e002      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_GetSysClockFreq+0x164>)
 8001d9a:	60bb      	str	r3, [r7, #8]
      break;
 8001d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bdb0      	pop	{r4, r5, r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	00f42400 	.word	0x00f42400
 8001db0:	017d7840 	.word	0x017d7840

08001db4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000018 	.word	0x20000018

08001dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd0:	f7ff fff0 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0a9b      	lsrs	r3, r3, #10
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4903      	ldr	r1, [pc, #12]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	080043f8 	.word	0x080043f8

08001df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df8:	f7ff ffdc 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0b5b      	lsrs	r3, r3, #13
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4903      	ldr	r1, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	080043f8 	.word	0x080043f8

08001e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d012      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e44:	4b69      	ldr	r3, [pc, #420]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a68      	ldr	r2, [pc, #416]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e4e:	6093      	str	r3, [r2, #8]
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e58:	4964      	ldr	r1, [pc, #400]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d017      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e76:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	4959      	ldr	r1, [pc, #356]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e94:	d101      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d017      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eb2:	4b4e      	ldr	r3, [pc, #312]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	494a      	ldr	r1, [pc, #296]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 808b 	beq.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a39      	ldr	r2, [pc, #228]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f18:	4b35      	ldr	r3, [pc, #212]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f24:	f7fe ff82 	bl	8000e2c <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7fe ff7e 	bl	8000e2c <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e357      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f4a:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d035      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d02e      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f82:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f8a:	4a18      	ldr	r2, [pc, #96]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d114      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe ff46 	bl	8000e2c <HAL_GetTick>
 8001fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe ff42 	bl	8000e2c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e319      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ee      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fd2:	d111      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fe2:	400b      	ands	r3, r1
 8001fe4:	4901      	ldr	r1, [pc, #4]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
 8001fea:	e00b      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40007000 	.word	0x40007000
 8001ff4:	0ffffcff 	.word	0x0ffffcff
 8001ff8:	4bb1      	ldr	r3, [pc, #708]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4ab0      	ldr	r2, [pc, #704]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8001ffe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002002:	6093      	str	r3, [r2, #8]
 8002004:	4bae      	ldr	r3, [pc, #696]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	49ab      	ldr	r1, [pc, #684]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d010      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002022:	4ba7      	ldr	r3, [pc, #668]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002028:	4aa5      	ldr	r2, [pc, #660]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800202a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800202e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002032:	4ba3      	ldr	r3, [pc, #652]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002034:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	49a0      	ldr	r1, [pc, #640]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002050:	4b9b      	ldr	r3, [pc, #620]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205e:	4998      	ldr	r1, [pc, #608]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002072:	4b93      	ldr	r3, [pc, #588]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002080:	498f      	ldr	r1, [pc, #572]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002094:	4b8a      	ldr	r3, [pc, #552]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a2:	4987      	ldr	r1, [pc, #540]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	497e      	ldr	r1, [pc, #504]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d8:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	f023 0203 	bic.w	r2, r3, #3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4976      	ldr	r1, [pc, #472]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020fa:	4b71      	ldr	r3, [pc, #452]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f023 020c 	bic.w	r2, r3, #12
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	496d      	ldr	r1, [pc, #436]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	4965      	ldr	r1, [pc, #404]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800213e:	4b60      	ldr	r3, [pc, #384]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214c:	495c      	ldr	r1, [pc, #368]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002160:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	4954      	ldr	r1, [pc, #336]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002182:	4b4f      	ldr	r3, [pc, #316]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	494b      	ldr	r1, [pc, #300]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80021a4:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	4943      	ldr	r1, [pc, #268]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d4:	493a      	ldr	r1, [pc, #232]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021e8:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021f6:	4932      	ldr	r1, [pc, #200]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d011      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002218:	4929      	ldr	r1, [pc, #164]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800222a:	2301      	movs	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800223a:	2301      	movs	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800224a:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	4919      	ldr	r1, [pc, #100]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800227c:	4910      	ldr	r1, [pc, #64]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d006      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80d9 	beq.w	800244a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800229e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a4:	f7fe fdc2 	bl	8000e2c <HAL_GetTick>
 80022a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022aa:	e00b      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022ac:	f7fe fdbe 	bl	8000e2c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b64      	cmp	r3, #100	; 0x64
 80022b8:	d904      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e197      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022c4:	4b6c      	ldr	r3, [pc, #432]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ed      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d021      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d11d      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022e4:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ea:	0c1b      	lsrs	r3, r3, #16
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022f2:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f8:	0e1b      	lsrs	r3, r3, #24
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	019a      	lsls	r2, r3, #6
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	041b      	lsls	r3, r3, #16
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	061b      	lsls	r3, r3, #24
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	071b      	lsls	r3, r3, #28
 8002318:	4957      	ldr	r1, [pc, #348]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800233e:	2b00      	cmp	r3, #0
 8002340:	d02e      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800234a:	d129      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800234e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002352:	0c1b      	lsrs	r3, r3, #16
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800235c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002360:	0f1b      	lsrs	r3, r3, #28
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	019a      	lsls	r2, r3, #6
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	431a      	orrs	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	071b      	lsls	r3, r3, #28
 8002380:	493d      	ldr	r1, [pc, #244]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002388:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800238a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238e:	f023 021f 	bic.w	r2, r3, #31
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	3b01      	subs	r3, #1
 8002398:	4937      	ldr	r1, [pc, #220]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d01d      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ac:	4b32      	ldr	r3, [pc, #200]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b2:	0e1b      	lsrs	r3, r3, #24
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	0f1b      	lsrs	r3, r3, #28
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	019a      	lsls	r2, r3, #6
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	071b      	lsls	r3, r3, #28
 80023e0:	4925      	ldr	r1, [pc, #148]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d011      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	019a      	lsls	r2, r3, #6
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	071b      	lsls	r3, r3, #28
 8002410:	4919      	ldr	r1, [pc, #100]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800241e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fd02 	bl	8000e2c <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800242c:	f7fe fcfe 	bl	8000e2c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0d7      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	f040 80cd 	bne.w	80025ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245e:	f7fe fce5 	bl	8000e2c <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002466:	f7fe fce1 	bl	8000e2c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d903      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0ba      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002478:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800247c:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002488:	d0ed      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d02e      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d12a      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024b2:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024c0:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	0f1b      	lsrs	r3, r3, #28
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	019a      	lsls	r2, r3, #6
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	061b      	lsls	r3, r3, #24
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	071b      	lsls	r3, r3, #28
 80024e6:	4944      	ldr	r1, [pc, #272]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80024ee:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	3b01      	subs	r3, #1
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	493d      	ldr	r1, [pc, #244]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d022      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800251c:	d11d      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	0e1b      	lsrs	r3, r3, #24
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	0f1b      	lsrs	r3, r3, #28
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	019a      	lsls	r2, r3, #6
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	041b      	lsls	r3, r3, #16
 8002546:	431a      	orrs	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	061b      	lsls	r3, r3, #24
 800254c:	431a      	orrs	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	071b      	lsls	r3, r3, #28
 8002552:	4929      	ldr	r1, [pc, #164]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002566:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	0e1b      	lsrs	r3, r3, #24
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002574:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	0c1b      	lsrs	r3, r3, #16
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	019a      	lsls	r2, r3, #6
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	431a      	orrs	r2, r3
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	071b      	lsls	r3, r3, #28
 800259a:	4917      	ldr	r1, [pc, #92]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	4911      	ldr	r1, [pc, #68]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c4:	f7fe fc32 	bl	8000e2c <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80025cc:	f7fe fc2e 	bl	8000e2c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e007      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025ea:	d1ef      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e049      	b.n	80026a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fab2 	bl	8000b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 fac0 	bl	8002bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d001      	beq.n	80026c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e054      	b.n	800276e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <HAL_TIM_Base_Start_IT+0xd0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d022      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x80>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ee:	d01d      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x80>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <HAL_TIM_Base_Start_IT+0xd4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d018      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x80>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a21      	ldr	r2, [pc, #132]	; (8002784 <HAL_TIM_Base_Start_IT+0xd8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x80>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_TIM_Base_Start_IT+0xdc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00e      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x80>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_TIM_Base_Start_IT+0xe0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d009      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x80>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <HAL_TIM_Base_Start_IT+0xe4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_TIM_Base_Start_IT+0x80>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <HAL_TIM_Base_Start_IT+0xe8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d115      	bne.n	8002758 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_TIM_Base_Start_IT+0xec>)
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b06      	cmp	r3, #6
 800273c:	d015      	beq.n	800276a <HAL_TIM_Base_Start_IT+0xbe>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002744:	d011      	beq.n	800276a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002756:	e008      	b.n	800276a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e000      	b.n	800276c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000
 8002780:	40000400 	.word	0x40000400
 8002784:	40000800 	.word	0x40000800
 8002788:	40000c00 	.word	0x40000c00
 800278c:	40010400 	.word	0x40010400
 8002790:	40014000 	.word	0x40014000
 8002794:	40001800 	.word	0x40001800
 8002798:	00010007 	.word	0x00010007

0800279c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d122      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d11b      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0202 	mvn.w	r2, #2
 80027c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f9d0 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f9c2 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f9d3 	bl	8002b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b04      	cmp	r3, #4
 8002804:	d122      	bne.n	800284c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b04      	cmp	r3, #4
 8002812:	d11b      	bne.n	800284c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0204 	mvn.w	r2, #4
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2202      	movs	r2, #2
 8002822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f9a6 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 8002838:	e005      	b.n	8002846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f998 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f9a9 	bl	8002b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b08      	cmp	r3, #8
 8002858:	d122      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b08      	cmp	r3, #8
 8002866:	d11b      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0208 	mvn.w	r2, #8
 8002870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2204      	movs	r2, #4
 8002876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f97c 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f96e 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f97f 	bl	8002b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0310 	and.w	r3, r3, #16
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0210 	mvn.w	r2, #16
 80028c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2208      	movs	r2, #8
 80028ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f952 	bl	8002b84 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f944 	bl	8002b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f955 	bl	8002b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d10e      	bne.n	8002920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0201 	mvn.w	r2, #1
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fd ff6c 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d10e      	bne.n	800294c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002938:	2b80      	cmp	r3, #128	; 0x80
 800293a:	d107      	bne.n	800294c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fb0c 	bl	8002f64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295a:	d10e      	bne.n	800297a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b80      	cmp	r3, #128	; 0x80
 8002968:	d107      	bne.n	800297a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 faff 	bl	8002f78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d10e      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d107      	bne.n	80029a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800299e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f903 	bl	8002bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f003 0320 	and.w	r3, r3, #32
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d10e      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d107      	bne.n	80029d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f06f 0220 	mvn.w	r2, #32
 80029ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fabf 	bl	8002f50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_ConfigClockSource+0x1c>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0b4      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x186>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	4b56      	ldr	r3, [pc, #344]	; (8002b6c <HAL_TIM_ConfigClockSource+0x190>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a30:	d03e      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8002a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a36:	f200 8087 	bhi.w	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	f000 8086 	beq.w	8002b4e <HAL_TIM_ConfigClockSource+0x172>
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	d87f      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d01a      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0xa6>
 8002a4c:	2b70      	cmp	r3, #112	; 0x70
 8002a4e:	d87b      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a50:	2b60      	cmp	r3, #96	; 0x60
 8002a52:	d050      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x11a>
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d877      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a58:	2b50      	cmp	r3, #80	; 0x50
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d873      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d058      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x13a>
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d86f      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a68:	2b30      	cmp	r3, #48	; 0x30
 8002a6a:	d064      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x15a>
 8002a6c:	2b30      	cmp	r3, #48	; 0x30
 8002a6e:	d86b      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d060      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x15a>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d867      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05c      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x15a>
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d05a      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x15a>
 8002a80:	e062      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f000 f9af 	bl	8002df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	609a      	str	r2, [r3, #8]
      break;
 8002aae:	e04f      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f000 f998 	bl	8002df4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad2:	609a      	str	r2, [r3, #8]
      break;
 8002ad4:	e03c      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 f90c 	bl	8002d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2150      	movs	r1, #80	; 0x50
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f965 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 8002af4:	e02c      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 f92b 	bl	8002d5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2160      	movs	r1, #96	; 0x60
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f955 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 8002b14:	e01c      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 f8ec 	bl	8002d00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f945 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 8002b34:	e00c      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f000 f93c 	bl	8002dbe <TIM_ITRx_SetConfig>
      break;
 8002b46:	e003      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e000      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	fffeff88 	.word	0xfffeff88

08002b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <TIM_Base_SetConfig+0x114>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d013      	beq.n	8002c00 <TIM_Base_SetConfig+0x40>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bde:	d00f      	beq.n	8002c00 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a3d      	ldr	r2, [pc, #244]	; (8002cd8 <TIM_Base_SetConfig+0x118>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <TIM_Base_SetConfig+0x40>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a3c      	ldr	r2, [pc, #240]	; (8002cdc <TIM_Base_SetConfig+0x11c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d007      	beq.n	8002c00 <TIM_Base_SetConfig+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a3b      	ldr	r2, [pc, #236]	; (8002ce0 <TIM_Base_SetConfig+0x120>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d003      	beq.n	8002c00 <TIM_Base_SetConfig+0x40>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a3a      	ldr	r2, [pc, #232]	; (8002ce4 <TIM_Base_SetConfig+0x124>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d108      	bne.n	8002c12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <TIM_Base_SetConfig+0x114>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d02b      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c20:	d027      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a2c      	ldr	r2, [pc, #176]	; (8002cd8 <TIM_Base_SetConfig+0x118>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d023      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	; (8002cdc <TIM_Base_SetConfig+0x11c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01f      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a2a      	ldr	r2, [pc, #168]	; (8002ce0 <TIM_Base_SetConfig+0x120>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01b      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a29      	ldr	r2, [pc, #164]	; (8002ce4 <TIM_Base_SetConfig+0x124>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d017      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a28      	ldr	r2, [pc, #160]	; (8002ce8 <TIM_Base_SetConfig+0x128>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <TIM_Base_SetConfig+0x12c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00f      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a26      	ldr	r2, [pc, #152]	; (8002cf0 <TIM_Base_SetConfig+0x130>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a25      	ldr	r2, [pc, #148]	; (8002cf4 <TIM_Base_SetConfig+0x134>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d007      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a24      	ldr	r2, [pc, #144]	; (8002cf8 <TIM_Base_SetConfig+0x138>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d003      	beq.n	8002c72 <TIM_Base_SetConfig+0xb2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <TIM_Base_SetConfig+0x13c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d108      	bne.n	8002c84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <TIM_Base_SetConfig+0x114>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0xf8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ce4 <TIM_Base_SetConfig+0x124>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d103      	bne.n	8002cc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	615a      	str	r2, [r3, #20]
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40000800 	.word	0x40000800
 8002ce0:	40000c00 	.word	0x40000c00
 8002ce4:	40010400 	.word	0x40010400
 8002ce8:	40014000 	.word	0x40014000
 8002cec:	40014400 	.word	0x40014400
 8002cf0:	40014800 	.word	0x40014800
 8002cf4:	40001800 	.word	0x40001800
 8002cf8:	40001c00 	.word	0x40001c00
 8002cfc:	40002000 	.word	0x40002000

08002d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0201 	bic.w	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 030a 	bic.w	r3, r3, #10
 8002d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b087      	sub	sp, #28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f023 0210 	bic.w	r2, r3, #16
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	031b      	lsls	r3, r3, #12
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f043 0307 	orr.w	r3, r3, #7
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	021a      	lsls	r2, r3, #8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	431a      	orrs	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	609a      	str	r2, [r3, #8]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e06d      	b.n	8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a30      	ldr	r2, [pc, #192]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2f      	ldr	r2, [pc, #188]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d022      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d01d      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d018      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d013      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00e      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d009      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d004      	beq.n	8002efc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a15      	ldr	r2, [pc, #84]	; (8002f4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d10c      	bne.n	8002f16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40010400 	.word	0x40010400
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800
 8002f44:	40000c00 	.word	0x40000c00
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40001800 	.word	0x40001800

08002f50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e040      	b.n	8003020 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd fe40 	bl	8000c34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	; 0x24
 8002fb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0201 	bic.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f990 	bl	80032f0 <UART_SetConfig>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e022      	b.n	8003020 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fbe6 	bl	80037b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 fc6d 	bl	80038f8 <UART_CheckIdleState>
 800301e:	4603      	mov	r3, r0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08a      	sub	sp, #40	; 0x28
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303c:	2b20      	cmp	r3, #32
 800303e:	f040 8081 	bne.w	8003144 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_UART_Transmit+0x26>
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e079      	b.n	8003146 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_UART_Transmit+0x38>
 800305c:	2302      	movs	r3, #2
 800305e:	e072      	b.n	8003146 <HAL_UART_Transmit+0x11e>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2221      	movs	r2, #33	; 0x21
 8003074:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003076:	f7fd fed9 	bl	8000e2c <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	d108      	bne.n	80030a8 <HAL_UART_Transmit+0x80>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e003      	b.n	80030b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80030b8:	e02c      	b.n	8003114 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fc4a 	bl	800395e <UART_WaitOnFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e038      	b.n	8003146 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	3302      	adds	r3, #2
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e007      	b.n	8003102 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1cc      	bne.n	80030ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2200      	movs	r2, #0
 8003128:	2140      	movs	r1, #64	; 0x40
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fc17 	bl	800395e <UART_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e005      	b.n	8003146 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b08a      	sub	sp, #40	; 0x28
 8003152:	af02      	add	r7, sp, #8
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003162:	2b20      	cmp	r3, #32
 8003164:	f040 80be 	bne.w	80032e4 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Receive+0x26>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0b6      	b.n	80032e6 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_UART_Receive+0x38>
 8003182:	2302      	movs	r3, #2
 8003184:	e0af      	b.n	80032e6 <HAL_UART_Receive+0x198>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2222      	movs	r2, #34	; 0x22
 800319a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031a2:	f7fd fe43 	bl	8000e2c <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c0:	d10e      	bne.n	80031e0 <HAL_UART_Receive+0x92>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d105      	bne.n	80031d6 <HAL_UART_Receive+0x88>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031d4:	e02d      	b.n	8003232 <HAL_UART_Receive+0xe4>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	22ff      	movs	r2, #255	; 0xff
 80031da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031de:	e028      	b.n	8003232 <HAL_UART_Receive+0xe4>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10d      	bne.n	8003204 <HAL_UART_Receive+0xb6>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d104      	bne.n	80031fa <HAL_UART_Receive+0xac>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	22ff      	movs	r2, #255	; 0xff
 80031f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031f8:	e01b      	b.n	8003232 <HAL_UART_Receive+0xe4>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	227f      	movs	r2, #127	; 0x7f
 80031fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003202:	e016      	b.n	8003232 <HAL_UART_Receive+0xe4>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320c:	d10d      	bne.n	800322a <HAL_UART_Receive+0xdc>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Receive+0xd2>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	227f      	movs	r2, #127	; 0x7f
 800321a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800321e:	e008      	b.n	8003232 <HAL_UART_Receive+0xe4>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	223f      	movs	r2, #63	; 0x3f
 8003224:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003228:	e003      	b.n	8003232 <HAL_UART_Receive+0xe4>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003238:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003242:	d108      	bne.n	8003256 <HAL_UART_Receive+0x108>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d104      	bne.n	8003256 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	e003      	b.n	800325e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003266:	e032      	b.n	80032ce <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2200      	movs	r2, #0
 8003270:	2120      	movs	r1, #32
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fb73 	bl	800395e <UART_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e031      	b.n	80032e6 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10c      	bne.n	80032a2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	b29a      	uxth	r2, r3
 8003290:	8a7b      	ldrh	r3, [r7, #18]
 8003292:	4013      	ands	r3, r2
 8003294:	b29a      	uxth	r2, r3
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	3302      	adds	r3, #2
 800329e:	61bb      	str	r3, [r7, #24]
 80032a0:	e00c      	b.n	80032bc <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	8a7b      	ldrh	r3, [r7, #18]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	4013      	ands	r3, r2
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1c6      	bne.n	8003268 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4ba7      	ldr	r3, [pc, #668]	; (80035b8 <UART_SetConfig+0x2c8>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	6979      	ldr	r1, [r7, #20]
 8003324:	430b      	orrs	r3, r1
 8003326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a95      	ldr	r2, [pc, #596]	; (80035bc <UART_SetConfig+0x2cc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d120      	bne.n	80033ae <UART_SetConfig+0xbe>
 800336c:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <UART_SetConfig+0x2d0>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d816      	bhi.n	80033a8 <UART_SetConfig+0xb8>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <UART_SetConfig+0x90>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	0800339d 	.word	0x0800339d
 8003388:	08003397 	.word	0x08003397
 800338c:	080033a3 	.word	0x080033a3
 8003390:	2301      	movs	r3, #1
 8003392:	77fb      	strb	r3, [r7, #31]
 8003394:	e14f      	b.n	8003636 <UART_SetConfig+0x346>
 8003396:	2302      	movs	r3, #2
 8003398:	77fb      	strb	r3, [r7, #31]
 800339a:	e14c      	b.n	8003636 <UART_SetConfig+0x346>
 800339c:	2304      	movs	r3, #4
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e149      	b.n	8003636 <UART_SetConfig+0x346>
 80033a2:	2308      	movs	r3, #8
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e146      	b.n	8003636 <UART_SetConfig+0x346>
 80033a8:	2310      	movs	r3, #16
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e143      	b.n	8003636 <UART_SetConfig+0x346>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a84      	ldr	r2, [pc, #528]	; (80035c4 <UART_SetConfig+0x2d4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d132      	bne.n	800341e <UART_SetConfig+0x12e>
 80033b8:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <UART_SetConfig+0x2d0>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d828      	bhi.n	8003418 <UART_SetConfig+0x128>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0xdc>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003419 	.word	0x08003419
 80033d4:	08003419 	.word	0x08003419
 80033d8:	08003419 	.word	0x08003419
 80033dc:	0800340d 	.word	0x0800340d
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003419 	.word	0x08003419
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003407 	.word	0x08003407
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003419 	.word	0x08003419
 80033fc:	08003413 	.word	0x08003413
 8003400:	2300      	movs	r3, #0
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e117      	b.n	8003636 <UART_SetConfig+0x346>
 8003406:	2302      	movs	r3, #2
 8003408:	77fb      	strb	r3, [r7, #31]
 800340a:	e114      	b.n	8003636 <UART_SetConfig+0x346>
 800340c:	2304      	movs	r3, #4
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e111      	b.n	8003636 <UART_SetConfig+0x346>
 8003412:	2308      	movs	r3, #8
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e10e      	b.n	8003636 <UART_SetConfig+0x346>
 8003418:	2310      	movs	r3, #16
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e10b      	b.n	8003636 <UART_SetConfig+0x346>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a69      	ldr	r2, [pc, #420]	; (80035c8 <UART_SetConfig+0x2d8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d120      	bne.n	800346a <UART_SetConfig+0x17a>
 8003428:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <UART_SetConfig+0x2d0>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003432:	2b30      	cmp	r3, #48	; 0x30
 8003434:	d013      	beq.n	800345e <UART_SetConfig+0x16e>
 8003436:	2b30      	cmp	r3, #48	; 0x30
 8003438:	d814      	bhi.n	8003464 <UART_SetConfig+0x174>
 800343a:	2b20      	cmp	r3, #32
 800343c:	d009      	beq.n	8003452 <UART_SetConfig+0x162>
 800343e:	2b20      	cmp	r3, #32
 8003440:	d810      	bhi.n	8003464 <UART_SetConfig+0x174>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <UART_SetConfig+0x15c>
 8003446:	2b10      	cmp	r3, #16
 8003448:	d006      	beq.n	8003458 <UART_SetConfig+0x168>
 800344a:	e00b      	b.n	8003464 <UART_SetConfig+0x174>
 800344c:	2300      	movs	r3, #0
 800344e:	77fb      	strb	r3, [r7, #31]
 8003450:	e0f1      	b.n	8003636 <UART_SetConfig+0x346>
 8003452:	2302      	movs	r3, #2
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	e0ee      	b.n	8003636 <UART_SetConfig+0x346>
 8003458:	2304      	movs	r3, #4
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e0eb      	b.n	8003636 <UART_SetConfig+0x346>
 800345e:	2308      	movs	r3, #8
 8003460:	77fb      	strb	r3, [r7, #31]
 8003462:	e0e8      	b.n	8003636 <UART_SetConfig+0x346>
 8003464:	2310      	movs	r3, #16
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e0e5      	b.n	8003636 <UART_SetConfig+0x346>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a57      	ldr	r2, [pc, #348]	; (80035cc <UART_SetConfig+0x2dc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d120      	bne.n	80034b6 <UART_SetConfig+0x1c6>
 8003474:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <UART_SetConfig+0x2d0>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800347e:	2bc0      	cmp	r3, #192	; 0xc0
 8003480:	d013      	beq.n	80034aa <UART_SetConfig+0x1ba>
 8003482:	2bc0      	cmp	r3, #192	; 0xc0
 8003484:	d814      	bhi.n	80034b0 <UART_SetConfig+0x1c0>
 8003486:	2b80      	cmp	r3, #128	; 0x80
 8003488:	d009      	beq.n	800349e <UART_SetConfig+0x1ae>
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d810      	bhi.n	80034b0 <UART_SetConfig+0x1c0>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <UART_SetConfig+0x1a8>
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d006      	beq.n	80034a4 <UART_SetConfig+0x1b4>
 8003496:	e00b      	b.n	80034b0 <UART_SetConfig+0x1c0>
 8003498:	2300      	movs	r3, #0
 800349a:	77fb      	strb	r3, [r7, #31]
 800349c:	e0cb      	b.n	8003636 <UART_SetConfig+0x346>
 800349e:	2302      	movs	r3, #2
 80034a0:	77fb      	strb	r3, [r7, #31]
 80034a2:	e0c8      	b.n	8003636 <UART_SetConfig+0x346>
 80034a4:	2304      	movs	r3, #4
 80034a6:	77fb      	strb	r3, [r7, #31]
 80034a8:	e0c5      	b.n	8003636 <UART_SetConfig+0x346>
 80034aa:	2308      	movs	r3, #8
 80034ac:	77fb      	strb	r3, [r7, #31]
 80034ae:	e0c2      	b.n	8003636 <UART_SetConfig+0x346>
 80034b0:	2310      	movs	r3, #16
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e0bf      	b.n	8003636 <UART_SetConfig+0x346>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a45      	ldr	r2, [pc, #276]	; (80035d0 <UART_SetConfig+0x2e0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d125      	bne.n	800350c <UART_SetConfig+0x21c>
 80034c0:	4b3f      	ldr	r3, [pc, #252]	; (80035c0 <UART_SetConfig+0x2d0>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ce:	d017      	beq.n	8003500 <UART_SetConfig+0x210>
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d4:	d817      	bhi.n	8003506 <UART_SetConfig+0x216>
 80034d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034da:	d00b      	beq.n	80034f4 <UART_SetConfig+0x204>
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d811      	bhi.n	8003506 <UART_SetConfig+0x216>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <UART_SetConfig+0x1fe>
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d006      	beq.n	80034fa <UART_SetConfig+0x20a>
 80034ec:	e00b      	b.n	8003506 <UART_SetConfig+0x216>
 80034ee:	2300      	movs	r3, #0
 80034f0:	77fb      	strb	r3, [r7, #31]
 80034f2:	e0a0      	b.n	8003636 <UART_SetConfig+0x346>
 80034f4:	2302      	movs	r3, #2
 80034f6:	77fb      	strb	r3, [r7, #31]
 80034f8:	e09d      	b.n	8003636 <UART_SetConfig+0x346>
 80034fa:	2304      	movs	r3, #4
 80034fc:	77fb      	strb	r3, [r7, #31]
 80034fe:	e09a      	b.n	8003636 <UART_SetConfig+0x346>
 8003500:	2308      	movs	r3, #8
 8003502:	77fb      	strb	r3, [r7, #31]
 8003504:	e097      	b.n	8003636 <UART_SetConfig+0x346>
 8003506:	2310      	movs	r3, #16
 8003508:	77fb      	strb	r3, [r7, #31]
 800350a:	e094      	b.n	8003636 <UART_SetConfig+0x346>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a30      	ldr	r2, [pc, #192]	; (80035d4 <UART_SetConfig+0x2e4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d125      	bne.n	8003562 <UART_SetConfig+0x272>
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <UART_SetConfig+0x2d0>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003524:	d017      	beq.n	8003556 <UART_SetConfig+0x266>
 8003526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800352a:	d817      	bhi.n	800355c <UART_SetConfig+0x26c>
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003530:	d00b      	beq.n	800354a <UART_SetConfig+0x25a>
 8003532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003536:	d811      	bhi.n	800355c <UART_SetConfig+0x26c>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <UART_SetConfig+0x254>
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d006      	beq.n	8003550 <UART_SetConfig+0x260>
 8003542:	e00b      	b.n	800355c <UART_SetConfig+0x26c>
 8003544:	2301      	movs	r3, #1
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e075      	b.n	8003636 <UART_SetConfig+0x346>
 800354a:	2302      	movs	r3, #2
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	e072      	b.n	8003636 <UART_SetConfig+0x346>
 8003550:	2304      	movs	r3, #4
 8003552:	77fb      	strb	r3, [r7, #31]
 8003554:	e06f      	b.n	8003636 <UART_SetConfig+0x346>
 8003556:	2308      	movs	r3, #8
 8003558:	77fb      	strb	r3, [r7, #31]
 800355a:	e06c      	b.n	8003636 <UART_SetConfig+0x346>
 800355c:	2310      	movs	r3, #16
 800355e:	77fb      	strb	r3, [r7, #31]
 8003560:	e069      	b.n	8003636 <UART_SetConfig+0x346>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <UART_SetConfig+0x2e8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d137      	bne.n	80035dc <UART_SetConfig+0x2ec>
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <UART_SetConfig+0x2d0>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800357a:	d017      	beq.n	80035ac <UART_SetConfig+0x2bc>
 800357c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003580:	d817      	bhi.n	80035b2 <UART_SetConfig+0x2c2>
 8003582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003586:	d00b      	beq.n	80035a0 <UART_SetConfig+0x2b0>
 8003588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358c:	d811      	bhi.n	80035b2 <UART_SetConfig+0x2c2>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <UART_SetConfig+0x2aa>
 8003592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003596:	d006      	beq.n	80035a6 <UART_SetConfig+0x2b6>
 8003598:	e00b      	b.n	80035b2 <UART_SetConfig+0x2c2>
 800359a:	2300      	movs	r3, #0
 800359c:	77fb      	strb	r3, [r7, #31]
 800359e:	e04a      	b.n	8003636 <UART_SetConfig+0x346>
 80035a0:	2302      	movs	r3, #2
 80035a2:	77fb      	strb	r3, [r7, #31]
 80035a4:	e047      	b.n	8003636 <UART_SetConfig+0x346>
 80035a6:	2304      	movs	r3, #4
 80035a8:	77fb      	strb	r3, [r7, #31]
 80035aa:	e044      	b.n	8003636 <UART_SetConfig+0x346>
 80035ac:	2308      	movs	r3, #8
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e041      	b.n	8003636 <UART_SetConfig+0x346>
 80035b2:	2310      	movs	r3, #16
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e03e      	b.n	8003636 <UART_SetConfig+0x346>
 80035b8:	efff69f3 	.word	0xefff69f3
 80035bc:	40011000 	.word	0x40011000
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40004400 	.word	0x40004400
 80035c8:	40004800 	.word	0x40004800
 80035cc:	40004c00 	.word	0x40004c00
 80035d0:	40005000 	.word	0x40005000
 80035d4:	40011400 	.word	0x40011400
 80035d8:	40007800 	.word	0x40007800
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a71      	ldr	r2, [pc, #452]	; (80037a8 <UART_SetConfig+0x4b8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d125      	bne.n	8003632 <UART_SetConfig+0x342>
 80035e6:	4b71      	ldr	r3, [pc, #452]	; (80037ac <UART_SetConfig+0x4bc>)
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035f4:	d017      	beq.n	8003626 <UART_SetConfig+0x336>
 80035f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035fa:	d817      	bhi.n	800362c <UART_SetConfig+0x33c>
 80035fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003600:	d00b      	beq.n	800361a <UART_SetConfig+0x32a>
 8003602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003606:	d811      	bhi.n	800362c <UART_SetConfig+0x33c>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <UART_SetConfig+0x324>
 800360c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003610:	d006      	beq.n	8003620 <UART_SetConfig+0x330>
 8003612:	e00b      	b.n	800362c <UART_SetConfig+0x33c>
 8003614:	2300      	movs	r3, #0
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e00d      	b.n	8003636 <UART_SetConfig+0x346>
 800361a:	2302      	movs	r3, #2
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e00a      	b.n	8003636 <UART_SetConfig+0x346>
 8003620:	2304      	movs	r3, #4
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e007      	b.n	8003636 <UART_SetConfig+0x346>
 8003626:	2308      	movs	r3, #8
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e004      	b.n	8003636 <UART_SetConfig+0x346>
 800362c:	2310      	movs	r3, #16
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e001      	b.n	8003636 <UART_SetConfig+0x346>
 8003632:	2310      	movs	r3, #16
 8003634:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d15a      	bne.n	80036f6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003640:	7ffb      	ldrb	r3, [r7, #31]
 8003642:	2b08      	cmp	r3, #8
 8003644:	d827      	bhi.n	8003696 <UART_SetConfig+0x3a6>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <UART_SetConfig+0x35c>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	08003671 	.word	0x08003671
 8003650:	08003679 	.word	0x08003679
 8003654:	08003681 	.word	0x08003681
 8003658:	08003697 	.word	0x08003697
 800365c:	08003687 	.word	0x08003687
 8003660:	08003697 	.word	0x08003697
 8003664:	08003697 	.word	0x08003697
 8003668:	08003697 	.word	0x08003697
 800366c:	0800368f 	.word	0x0800368f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003670:	f7fe fbac 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 8003674:	61b8      	str	r0, [r7, #24]
        break;
 8003676:	e013      	b.n	80036a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003678:	f7fe fbbc 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 800367c:	61b8      	str	r0, [r7, #24]
        break;
 800367e:	e00f      	b.n	80036a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003680:	4b4b      	ldr	r3, [pc, #300]	; (80037b0 <UART_SetConfig+0x4c0>)
 8003682:	61bb      	str	r3, [r7, #24]
        break;
 8003684:	e00c      	b.n	80036a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003686:	f7fe fadf 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 800368a:	61b8      	str	r0, [r7, #24]
        break;
 800368c:	e008      	b.n	80036a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003692:	61bb      	str	r3, [r7, #24]
        break;
 8003694:	e004      	b.n	80036a0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	77bb      	strb	r3, [r7, #30]
        break;
 800369e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d074      	beq.n	8003790 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	005a      	lsls	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	441a      	add	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	d916      	bls.n	80036f0 <UART_SetConfig+0x400>
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c8:	d212      	bcs.n	80036f0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	f023 030f 	bic.w	r3, r3, #15
 80036d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	085b      	lsrs	r3, r3, #1
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	b29a      	uxth	r2, r3
 80036e0:	89fb      	ldrh	r3, [r7, #14]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	89fa      	ldrh	r2, [r7, #14]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	e04f      	b.n	8003790 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	77bb      	strb	r3, [r7, #30]
 80036f4:	e04c      	b.n	8003790 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036f6:	7ffb      	ldrb	r3, [r7, #31]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d828      	bhi.n	800374e <UART_SetConfig+0x45e>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <UART_SetConfig+0x414>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003729 	.word	0x08003729
 8003708:	08003731 	.word	0x08003731
 800370c:	08003739 	.word	0x08003739
 8003710:	0800374f 	.word	0x0800374f
 8003714:	0800373f 	.word	0x0800373f
 8003718:	0800374f 	.word	0x0800374f
 800371c:	0800374f 	.word	0x0800374f
 8003720:	0800374f 	.word	0x0800374f
 8003724:	08003747 	.word	0x08003747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003728:	f7fe fb50 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 800372c:	61b8      	str	r0, [r7, #24]
        break;
 800372e:	e013      	b.n	8003758 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003730:	f7fe fb60 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 8003734:	61b8      	str	r0, [r7, #24]
        break;
 8003736:	e00f      	b.n	8003758 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <UART_SetConfig+0x4c0>)
 800373a:	61bb      	str	r3, [r7, #24]
        break;
 800373c:	e00c      	b.n	8003758 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373e:	f7fe fa83 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8003742:	61b8      	str	r0, [r7, #24]
        break;
 8003744:	e008      	b.n	8003758 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374a:	61bb      	str	r3, [r7, #24]
        break;
 800374c:	e004      	b.n	8003758 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	77bb      	strb	r3, [r7, #30]
        break;
 8003756:	bf00      	nop
    }

    if (pclk != 0U)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d018      	beq.n	8003790 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	085a      	lsrs	r2, r3, #1
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	441a      	add	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b0f      	cmp	r3, #15
 8003776:	d909      	bls.n	800378c <UART_SetConfig+0x49c>
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377e:	d205      	bcs.n	800378c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	b29a      	uxth	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	60da      	str	r2, [r3, #12]
 800378a:	e001      	b.n	8003790 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800379c:	7fbb      	ldrb	r3, [r7, #30]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3720      	adds	r7, #32
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40007c00 	.word	0x40007c00
 80037ac:	40023800 	.word	0x40023800
 80037b0:	00f42400 	.word	0x00f42400

080037b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01a      	beq.n	80038ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b2:	d10a      	bne.n	80038ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003908:	f7fd fa90 	bl	8000e2c <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d10e      	bne.n	800393a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800391c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f817 	bl	800395e <UART_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e00d      	b.n	8003956 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b09c      	sub	sp, #112	; 0x70
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	4613      	mov	r3, r2
 800396c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396e:	e0a5      	b.n	8003abc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003970:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	f000 80a1 	beq.w	8003abc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397a:	f7fd fa57 	bl	8000e2c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <UART_WaitOnFlagUntilTimeout+0x32>
 800398a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800398c:	2b00      	cmp	r3, #0
 800398e:	d13e      	bne.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800399e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a4:	667b      	str	r3, [r7, #100]	; 0x64
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e6      	bne.n	8003990 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3308      	adds	r3, #8
 80039c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039cc:	e853 3f00 	ldrex	r3, [r3]
 80039d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	663b      	str	r3, [r7, #96]	; 0x60
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3308      	adds	r3, #8
 80039e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80039e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e5      	bne.n	80039c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e067      	b.n	8003ade <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d04f      	beq.n	8003abc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2a:	d147      	bne.n	8003abc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e6      	bne.n	8003a36 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	e853 3f00 	ldrex	r3, [r3]
 8003a76:	613b      	str	r3, [r7, #16]
   return(result);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f023 0301 	bic.w	r3, r3, #1
 8003a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3308      	adds	r3, #8
 8003a86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a88:	623a      	str	r2, [r7, #32]
 8003a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8c:	69f9      	ldr	r1, [r7, #28]
 8003a8e:	6a3a      	ldr	r2, [r7, #32]
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e5      	bne.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e010      	b.n	8003ade <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	f43f af4a 	beq.w	8003970 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3770      	adds	r7, #112	; 0x70
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <__errno>:
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <__errno+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000024 	.word	0x20000024

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4d0d      	ldr	r5, [pc, #52]	; (8003b2c <__libc_init_array+0x38>)
 8003af8:	4c0d      	ldr	r4, [pc, #52]	; (8003b30 <__libc_init_array+0x3c>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	2600      	movs	r6, #0
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	4d0b      	ldr	r5, [pc, #44]	; (8003b34 <__libc_init_array+0x40>)
 8003b06:	4c0c      	ldr	r4, [pc, #48]	; (8003b38 <__libc_init_array+0x44>)
 8003b08:	f000 fc4e 	bl	80043a8 <_init>
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	2600      	movs	r6, #0
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	0800443c 	.word	0x0800443c
 8003b30:	0800443c 	.word	0x0800443c
 8003b34:	0800443c 	.word	0x0800443c
 8003b38:	08004440 	.word	0x08004440

08003b3c <memset>:
 8003b3c:	4402      	add	r2, r0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d100      	bne.n	8003b46 <memset+0xa>
 8003b44:	4770      	bx	lr
 8003b46:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4a:	e7f9      	b.n	8003b40 <memset+0x4>

08003b4c <siprintf>:
 8003b4c:	b40e      	push	{r1, r2, r3}
 8003b4e:	b500      	push	{lr}
 8003b50:	b09c      	sub	sp, #112	; 0x70
 8003b52:	ab1d      	add	r3, sp, #116	; 0x74
 8003b54:	9002      	str	r0, [sp, #8]
 8003b56:	9006      	str	r0, [sp, #24]
 8003b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b5c:	4809      	ldr	r0, [pc, #36]	; (8003b84 <siprintf+0x38>)
 8003b5e:	9107      	str	r1, [sp, #28]
 8003b60:	9104      	str	r1, [sp, #16]
 8003b62:	4909      	ldr	r1, [pc, #36]	; (8003b88 <siprintf+0x3c>)
 8003b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b68:	9105      	str	r1, [sp, #20]
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	a902      	add	r1, sp, #8
 8003b70:	f000 f868 	bl	8003c44 <_svfiprintf_r>
 8003b74:	9b02      	ldr	r3, [sp, #8]
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	b01c      	add	sp, #112	; 0x70
 8003b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b80:	b003      	add	sp, #12
 8003b82:	4770      	bx	lr
 8003b84:	20000024 	.word	0x20000024
 8003b88:	ffff0208 	.word	0xffff0208

08003b8c <__ssputs_r>:
 8003b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b90:	688e      	ldr	r6, [r1, #8]
 8003b92:	429e      	cmp	r6, r3
 8003b94:	4682      	mov	sl, r0
 8003b96:	460c      	mov	r4, r1
 8003b98:	4690      	mov	r8, r2
 8003b9a:	461f      	mov	r7, r3
 8003b9c:	d838      	bhi.n	8003c10 <__ssputs_r+0x84>
 8003b9e:	898a      	ldrh	r2, [r1, #12]
 8003ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ba4:	d032      	beq.n	8003c0c <__ssputs_r+0x80>
 8003ba6:	6825      	ldr	r5, [r4, #0]
 8003ba8:	6909      	ldr	r1, [r1, #16]
 8003baa:	eba5 0901 	sub.w	r9, r5, r1
 8003bae:	6965      	ldr	r5, [r4, #20]
 8003bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bb8:	3301      	adds	r3, #1
 8003bba:	444b      	add	r3, r9
 8003bbc:	106d      	asrs	r5, r5, #1
 8003bbe:	429d      	cmp	r5, r3
 8003bc0:	bf38      	it	cc
 8003bc2:	461d      	movcc	r5, r3
 8003bc4:	0553      	lsls	r3, r2, #21
 8003bc6:	d531      	bpl.n	8003c2c <__ssputs_r+0xa0>
 8003bc8:	4629      	mov	r1, r5
 8003bca:	f000 fb47 	bl	800425c <_malloc_r>
 8003bce:	4606      	mov	r6, r0
 8003bd0:	b950      	cbnz	r0, 8003be8 <__ssputs_r+0x5c>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	f8ca 3000 	str.w	r3, [sl]
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be8:	6921      	ldr	r1, [r4, #16]
 8003bea:	464a      	mov	r2, r9
 8003bec:	f000 fabe 	bl	800416c <memcpy>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	6126      	str	r6, [r4, #16]
 8003bfe:	6165      	str	r5, [r4, #20]
 8003c00:	444e      	add	r6, r9
 8003c02:	eba5 0509 	sub.w	r5, r5, r9
 8003c06:	6026      	str	r6, [r4, #0]
 8003c08:	60a5      	str	r5, [r4, #8]
 8003c0a:	463e      	mov	r6, r7
 8003c0c:	42be      	cmp	r6, r7
 8003c0e:	d900      	bls.n	8003c12 <__ssputs_r+0x86>
 8003c10:	463e      	mov	r6, r7
 8003c12:	4632      	mov	r2, r6
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	4641      	mov	r1, r8
 8003c18:	f000 fab6 	bl	8004188 <memmove>
 8003c1c:	68a3      	ldr	r3, [r4, #8]
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	1b9b      	subs	r3, r3, r6
 8003c22:	4432      	add	r2, r6
 8003c24:	60a3      	str	r3, [r4, #8]
 8003c26:	6022      	str	r2, [r4, #0]
 8003c28:	2000      	movs	r0, #0
 8003c2a:	e7db      	b.n	8003be4 <__ssputs_r+0x58>
 8003c2c:	462a      	mov	r2, r5
 8003c2e:	f000 fb6f 	bl	8004310 <_realloc_r>
 8003c32:	4606      	mov	r6, r0
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d1e1      	bne.n	8003bfc <__ssputs_r+0x70>
 8003c38:	6921      	ldr	r1, [r4, #16]
 8003c3a:	4650      	mov	r0, sl
 8003c3c:	f000 fabe 	bl	80041bc <_free_r>
 8003c40:	e7c7      	b.n	8003bd2 <__ssputs_r+0x46>
	...

08003c44 <_svfiprintf_r>:
 8003c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c48:	4698      	mov	r8, r3
 8003c4a:	898b      	ldrh	r3, [r1, #12]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	b09d      	sub	sp, #116	; 0x74
 8003c50:	4607      	mov	r7, r0
 8003c52:	460d      	mov	r5, r1
 8003c54:	4614      	mov	r4, r2
 8003c56:	d50e      	bpl.n	8003c76 <_svfiprintf_r+0x32>
 8003c58:	690b      	ldr	r3, [r1, #16]
 8003c5a:	b963      	cbnz	r3, 8003c76 <_svfiprintf_r+0x32>
 8003c5c:	2140      	movs	r1, #64	; 0x40
 8003c5e:	f000 fafd 	bl	800425c <_malloc_r>
 8003c62:	6028      	str	r0, [r5, #0]
 8003c64:	6128      	str	r0, [r5, #16]
 8003c66:	b920      	cbnz	r0, 8003c72 <_svfiprintf_r+0x2e>
 8003c68:	230c      	movs	r3, #12
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	e0d1      	b.n	8003e16 <_svfiprintf_r+0x1d2>
 8003c72:	2340      	movs	r3, #64	; 0x40
 8003c74:	616b      	str	r3, [r5, #20]
 8003c76:	2300      	movs	r3, #0
 8003c78:	9309      	str	r3, [sp, #36]	; 0x24
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c84:	2330      	movs	r3, #48	; 0x30
 8003c86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e30 <_svfiprintf_r+0x1ec>
 8003c8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c8e:	f04f 0901 	mov.w	r9, #1
 8003c92:	4623      	mov	r3, r4
 8003c94:	469a      	mov	sl, r3
 8003c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c9a:	b10a      	cbz	r2, 8003ca0 <_svfiprintf_r+0x5c>
 8003c9c:	2a25      	cmp	r2, #37	; 0x25
 8003c9e:	d1f9      	bne.n	8003c94 <_svfiprintf_r+0x50>
 8003ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ca4:	d00b      	beq.n	8003cbe <_svfiprintf_r+0x7a>
 8003ca6:	465b      	mov	r3, fp
 8003ca8:	4622      	mov	r2, r4
 8003caa:	4629      	mov	r1, r5
 8003cac:	4638      	mov	r0, r7
 8003cae:	f7ff ff6d 	bl	8003b8c <__ssputs_r>
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	f000 80aa 	beq.w	8003e0c <_svfiprintf_r+0x1c8>
 8003cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cba:	445a      	add	r2, fp
 8003cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8003cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80a2 	beq.w	8003e0c <_svfiprintf_r+0x1c8>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f04f 32ff 	mov.w	r2, #4294967295
 8003cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cd2:	f10a 0a01 	add.w	sl, sl, #1
 8003cd6:	9304      	str	r3, [sp, #16]
 8003cd8:	9307      	str	r3, [sp, #28]
 8003cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cde:	931a      	str	r3, [sp, #104]	; 0x68
 8003ce0:	4654      	mov	r4, sl
 8003ce2:	2205      	movs	r2, #5
 8003ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce8:	4851      	ldr	r0, [pc, #324]	; (8003e30 <_svfiprintf_r+0x1ec>)
 8003cea:	f7fc faa1 	bl	8000230 <memchr>
 8003cee:	9a04      	ldr	r2, [sp, #16]
 8003cf0:	b9d8      	cbnz	r0, 8003d2a <_svfiprintf_r+0xe6>
 8003cf2:	06d0      	lsls	r0, r2, #27
 8003cf4:	bf44      	itt	mi
 8003cf6:	2320      	movmi	r3, #32
 8003cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cfc:	0711      	lsls	r1, r2, #28
 8003cfe:	bf44      	itt	mi
 8003d00:	232b      	movmi	r3, #43	; 0x2b
 8003d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d06:	f89a 3000 	ldrb.w	r3, [sl]
 8003d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8003d0c:	d015      	beq.n	8003d3a <_svfiprintf_r+0xf6>
 8003d0e:	9a07      	ldr	r2, [sp, #28]
 8003d10:	4654      	mov	r4, sl
 8003d12:	2000      	movs	r0, #0
 8003d14:	f04f 0c0a 	mov.w	ip, #10
 8003d18:	4621      	mov	r1, r4
 8003d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d1e:	3b30      	subs	r3, #48	; 0x30
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d94e      	bls.n	8003dc2 <_svfiprintf_r+0x17e>
 8003d24:	b1b0      	cbz	r0, 8003d54 <_svfiprintf_r+0x110>
 8003d26:	9207      	str	r2, [sp, #28]
 8003d28:	e014      	b.n	8003d54 <_svfiprintf_r+0x110>
 8003d2a:	eba0 0308 	sub.w	r3, r0, r8
 8003d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	9304      	str	r3, [sp, #16]
 8003d36:	46a2      	mov	sl, r4
 8003d38:	e7d2      	b.n	8003ce0 <_svfiprintf_r+0x9c>
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	1d19      	adds	r1, r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	9103      	str	r1, [sp, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bfbb      	ittet	lt
 8003d46:	425b      	neglt	r3, r3
 8003d48:	f042 0202 	orrlt.w	r2, r2, #2
 8003d4c:	9307      	strge	r3, [sp, #28]
 8003d4e:	9307      	strlt	r3, [sp, #28]
 8003d50:	bfb8      	it	lt
 8003d52:	9204      	strlt	r2, [sp, #16]
 8003d54:	7823      	ldrb	r3, [r4, #0]
 8003d56:	2b2e      	cmp	r3, #46	; 0x2e
 8003d58:	d10c      	bne.n	8003d74 <_svfiprintf_r+0x130>
 8003d5a:	7863      	ldrb	r3, [r4, #1]
 8003d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5e:	d135      	bne.n	8003dcc <_svfiprintf_r+0x188>
 8003d60:	9b03      	ldr	r3, [sp, #12]
 8003d62:	1d1a      	adds	r2, r3, #4
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	9203      	str	r2, [sp, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bfb8      	it	lt
 8003d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d70:	3402      	adds	r4, #2
 8003d72:	9305      	str	r3, [sp, #20]
 8003d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e40 <_svfiprintf_r+0x1fc>
 8003d78:	7821      	ldrb	r1, [r4, #0]
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	f7fc fa57 	bl	8000230 <memchr>
 8003d82:	b140      	cbz	r0, 8003d96 <_svfiprintf_r+0x152>
 8003d84:	2340      	movs	r3, #64	; 0x40
 8003d86:	eba0 000a 	sub.w	r0, r0, sl
 8003d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8003d8e:	9b04      	ldr	r3, [sp, #16]
 8003d90:	4303      	orrs	r3, r0
 8003d92:	3401      	adds	r4, #1
 8003d94:	9304      	str	r3, [sp, #16]
 8003d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d9a:	4826      	ldr	r0, [pc, #152]	; (8003e34 <_svfiprintf_r+0x1f0>)
 8003d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003da0:	2206      	movs	r2, #6
 8003da2:	f7fc fa45 	bl	8000230 <memchr>
 8003da6:	2800      	cmp	r0, #0
 8003da8:	d038      	beq.n	8003e1c <_svfiprintf_r+0x1d8>
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <_svfiprintf_r+0x1f4>)
 8003dac:	bb1b      	cbnz	r3, 8003df6 <_svfiprintf_r+0x1b2>
 8003dae:	9b03      	ldr	r3, [sp, #12]
 8003db0:	3307      	adds	r3, #7
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	3308      	adds	r3, #8
 8003db8:	9303      	str	r3, [sp, #12]
 8003dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dbc:	4433      	add	r3, r6
 8003dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8003dc0:	e767      	b.n	8003c92 <_svfiprintf_r+0x4e>
 8003dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	2001      	movs	r0, #1
 8003dca:	e7a5      	b.n	8003d18 <_svfiprintf_r+0xd4>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	3401      	adds	r4, #1
 8003dd0:	9305      	str	r3, [sp, #20]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f04f 0c0a 	mov.w	ip, #10
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dde:	3a30      	subs	r2, #48	; 0x30
 8003de0:	2a09      	cmp	r2, #9
 8003de2:	d903      	bls.n	8003dec <_svfiprintf_r+0x1a8>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0c5      	beq.n	8003d74 <_svfiprintf_r+0x130>
 8003de8:	9105      	str	r1, [sp, #20]
 8003dea:	e7c3      	b.n	8003d74 <_svfiprintf_r+0x130>
 8003dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8003df0:	4604      	mov	r4, r0
 8003df2:	2301      	movs	r3, #1
 8003df4:	e7f0      	b.n	8003dd8 <_svfiprintf_r+0x194>
 8003df6:	ab03      	add	r3, sp, #12
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	462a      	mov	r2, r5
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	; (8003e3c <_svfiprintf_r+0x1f8>)
 8003dfe:	a904      	add	r1, sp, #16
 8003e00:	4638      	mov	r0, r7
 8003e02:	f3af 8000 	nop.w
 8003e06:	1c42      	adds	r2, r0, #1
 8003e08:	4606      	mov	r6, r0
 8003e0a:	d1d6      	bne.n	8003dba <_svfiprintf_r+0x176>
 8003e0c:	89ab      	ldrh	r3, [r5, #12]
 8003e0e:	065b      	lsls	r3, r3, #25
 8003e10:	f53f af2c 	bmi.w	8003c6c <_svfiprintf_r+0x28>
 8003e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e16:	b01d      	add	sp, #116	; 0x74
 8003e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e1c:	ab03      	add	r3, sp, #12
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	462a      	mov	r2, r5
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <_svfiprintf_r+0x1f8>)
 8003e24:	a904      	add	r1, sp, #16
 8003e26:	4638      	mov	r0, r7
 8003e28:	f000 f87a 	bl	8003f20 <_printf_i>
 8003e2c:	e7eb      	b.n	8003e06 <_svfiprintf_r+0x1c2>
 8003e2e:	bf00      	nop
 8003e30:	08004400 	.word	0x08004400
 8003e34:	0800440a 	.word	0x0800440a
 8003e38:	00000000 	.word	0x00000000
 8003e3c:	08003b8d 	.word	0x08003b8d
 8003e40:	08004406 	.word	0x08004406

08003e44 <_printf_common>:
 8003e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e48:	4616      	mov	r6, r2
 8003e4a:	4699      	mov	r9, r3
 8003e4c:	688a      	ldr	r2, [r1, #8]
 8003e4e:	690b      	ldr	r3, [r1, #16]
 8003e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	bfb8      	it	lt
 8003e58:	4613      	movlt	r3, r2
 8003e5a:	6033      	str	r3, [r6, #0]
 8003e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e60:	4607      	mov	r7, r0
 8003e62:	460c      	mov	r4, r1
 8003e64:	b10a      	cbz	r2, 8003e6a <_printf_common+0x26>
 8003e66:	3301      	adds	r3, #1
 8003e68:	6033      	str	r3, [r6, #0]
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	0699      	lsls	r1, r3, #26
 8003e6e:	bf42      	ittt	mi
 8003e70:	6833      	ldrmi	r3, [r6, #0]
 8003e72:	3302      	addmi	r3, #2
 8003e74:	6033      	strmi	r3, [r6, #0]
 8003e76:	6825      	ldr	r5, [r4, #0]
 8003e78:	f015 0506 	ands.w	r5, r5, #6
 8003e7c:	d106      	bne.n	8003e8c <_printf_common+0x48>
 8003e7e:	f104 0a19 	add.w	sl, r4, #25
 8003e82:	68e3      	ldr	r3, [r4, #12]
 8003e84:	6832      	ldr	r2, [r6, #0]
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	42ab      	cmp	r3, r5
 8003e8a:	dc26      	bgt.n	8003eda <_printf_common+0x96>
 8003e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e90:	1e13      	subs	r3, r2, #0
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	bf18      	it	ne
 8003e96:	2301      	movne	r3, #1
 8003e98:	0692      	lsls	r2, r2, #26
 8003e9a:	d42b      	bmi.n	8003ef4 <_printf_common+0xb0>
 8003e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	47c0      	blx	r8
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	d01e      	beq.n	8003ee8 <_printf_common+0xa4>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	68e5      	ldr	r5, [r4, #12]
 8003eae:	6832      	ldr	r2, [r6, #0]
 8003eb0:	f003 0306 	and.w	r3, r3, #6
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	bf08      	it	eq
 8003eb8:	1aad      	subeq	r5, r5, r2
 8003eba:	68a3      	ldr	r3, [r4, #8]
 8003ebc:	6922      	ldr	r2, [r4, #16]
 8003ebe:	bf0c      	ite	eq
 8003ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ec4:	2500      	movne	r5, #0
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	bfc4      	itt	gt
 8003eca:	1a9b      	subgt	r3, r3, r2
 8003ecc:	18ed      	addgt	r5, r5, r3
 8003ece:	2600      	movs	r6, #0
 8003ed0:	341a      	adds	r4, #26
 8003ed2:	42b5      	cmp	r5, r6
 8003ed4:	d11a      	bne.n	8003f0c <_printf_common+0xc8>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	e008      	b.n	8003eec <_printf_common+0xa8>
 8003eda:	2301      	movs	r3, #1
 8003edc:	4652      	mov	r2, sl
 8003ede:	4649      	mov	r1, r9
 8003ee0:	4638      	mov	r0, r7
 8003ee2:	47c0      	blx	r8
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	d103      	bne.n	8003ef0 <_printf_common+0xac>
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef0:	3501      	adds	r5, #1
 8003ef2:	e7c6      	b.n	8003e82 <_printf_common+0x3e>
 8003ef4:	18e1      	adds	r1, r4, r3
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	2030      	movs	r0, #48	; 0x30
 8003efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003efe:	4422      	add	r2, r4
 8003f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f08:	3302      	adds	r3, #2
 8003f0a:	e7c7      	b.n	8003e9c <_printf_common+0x58>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	4622      	mov	r2, r4
 8003f10:	4649      	mov	r1, r9
 8003f12:	4638      	mov	r0, r7
 8003f14:	47c0      	blx	r8
 8003f16:	3001      	adds	r0, #1
 8003f18:	d0e6      	beq.n	8003ee8 <_printf_common+0xa4>
 8003f1a:	3601      	adds	r6, #1
 8003f1c:	e7d9      	b.n	8003ed2 <_printf_common+0x8e>
	...

08003f20 <_printf_i>:
 8003f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f24:	460c      	mov	r4, r1
 8003f26:	4691      	mov	r9, r2
 8003f28:	7e27      	ldrb	r7, [r4, #24]
 8003f2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f2c:	2f78      	cmp	r7, #120	; 0x78
 8003f2e:	4680      	mov	r8, r0
 8003f30:	469a      	mov	sl, r3
 8003f32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f36:	d807      	bhi.n	8003f48 <_printf_i+0x28>
 8003f38:	2f62      	cmp	r7, #98	; 0x62
 8003f3a:	d80a      	bhi.n	8003f52 <_printf_i+0x32>
 8003f3c:	2f00      	cmp	r7, #0
 8003f3e:	f000 80d8 	beq.w	80040f2 <_printf_i+0x1d2>
 8003f42:	2f58      	cmp	r7, #88	; 0x58
 8003f44:	f000 80a3 	beq.w	800408e <_printf_i+0x16e>
 8003f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f50:	e03a      	b.n	8003fc8 <_printf_i+0xa8>
 8003f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f56:	2b15      	cmp	r3, #21
 8003f58:	d8f6      	bhi.n	8003f48 <_printf_i+0x28>
 8003f5a:	a001      	add	r0, pc, #4	; (adr r0, 8003f60 <_printf_i+0x40>)
 8003f5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f60:	08003fb9 	.word	0x08003fb9
 8003f64:	08003fcd 	.word	0x08003fcd
 8003f68:	08003f49 	.word	0x08003f49
 8003f6c:	08003f49 	.word	0x08003f49
 8003f70:	08003f49 	.word	0x08003f49
 8003f74:	08003f49 	.word	0x08003f49
 8003f78:	08003fcd 	.word	0x08003fcd
 8003f7c:	08003f49 	.word	0x08003f49
 8003f80:	08003f49 	.word	0x08003f49
 8003f84:	08003f49 	.word	0x08003f49
 8003f88:	08003f49 	.word	0x08003f49
 8003f8c:	080040d9 	.word	0x080040d9
 8003f90:	08003ffd 	.word	0x08003ffd
 8003f94:	080040bb 	.word	0x080040bb
 8003f98:	08003f49 	.word	0x08003f49
 8003f9c:	08003f49 	.word	0x08003f49
 8003fa0:	080040fb 	.word	0x080040fb
 8003fa4:	08003f49 	.word	0x08003f49
 8003fa8:	08003ffd 	.word	0x08003ffd
 8003fac:	08003f49 	.word	0x08003f49
 8003fb0:	08003f49 	.word	0x08003f49
 8003fb4:	080040c3 	.word	0x080040c3
 8003fb8:	680b      	ldr	r3, [r1, #0]
 8003fba:	1d1a      	adds	r2, r3, #4
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	600a      	str	r2, [r1, #0]
 8003fc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0a3      	b.n	8004114 <_printf_i+0x1f4>
 8003fcc:	6825      	ldr	r5, [r4, #0]
 8003fce:	6808      	ldr	r0, [r1, #0]
 8003fd0:	062e      	lsls	r6, r5, #24
 8003fd2:	f100 0304 	add.w	r3, r0, #4
 8003fd6:	d50a      	bpl.n	8003fee <_printf_i+0xce>
 8003fd8:	6805      	ldr	r5, [r0, #0]
 8003fda:	600b      	str	r3, [r1, #0]
 8003fdc:	2d00      	cmp	r5, #0
 8003fde:	da03      	bge.n	8003fe8 <_printf_i+0xc8>
 8003fe0:	232d      	movs	r3, #45	; 0x2d
 8003fe2:	426d      	negs	r5, r5
 8003fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe8:	485e      	ldr	r0, [pc, #376]	; (8004164 <_printf_i+0x244>)
 8003fea:	230a      	movs	r3, #10
 8003fec:	e019      	b.n	8004022 <_printf_i+0x102>
 8003fee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ff2:	6805      	ldr	r5, [r0, #0]
 8003ff4:	600b      	str	r3, [r1, #0]
 8003ff6:	bf18      	it	ne
 8003ff8:	b22d      	sxthne	r5, r5
 8003ffa:	e7ef      	b.n	8003fdc <_printf_i+0xbc>
 8003ffc:	680b      	ldr	r3, [r1, #0]
 8003ffe:	6825      	ldr	r5, [r4, #0]
 8004000:	1d18      	adds	r0, r3, #4
 8004002:	6008      	str	r0, [r1, #0]
 8004004:	0628      	lsls	r0, r5, #24
 8004006:	d501      	bpl.n	800400c <_printf_i+0xec>
 8004008:	681d      	ldr	r5, [r3, #0]
 800400a:	e002      	b.n	8004012 <_printf_i+0xf2>
 800400c:	0669      	lsls	r1, r5, #25
 800400e:	d5fb      	bpl.n	8004008 <_printf_i+0xe8>
 8004010:	881d      	ldrh	r5, [r3, #0]
 8004012:	4854      	ldr	r0, [pc, #336]	; (8004164 <_printf_i+0x244>)
 8004014:	2f6f      	cmp	r7, #111	; 0x6f
 8004016:	bf0c      	ite	eq
 8004018:	2308      	moveq	r3, #8
 800401a:	230a      	movne	r3, #10
 800401c:	2100      	movs	r1, #0
 800401e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004022:	6866      	ldr	r6, [r4, #4]
 8004024:	60a6      	str	r6, [r4, #8]
 8004026:	2e00      	cmp	r6, #0
 8004028:	bfa2      	ittt	ge
 800402a:	6821      	ldrge	r1, [r4, #0]
 800402c:	f021 0104 	bicge.w	r1, r1, #4
 8004030:	6021      	strge	r1, [r4, #0]
 8004032:	b90d      	cbnz	r5, 8004038 <_printf_i+0x118>
 8004034:	2e00      	cmp	r6, #0
 8004036:	d04d      	beq.n	80040d4 <_printf_i+0x1b4>
 8004038:	4616      	mov	r6, r2
 800403a:	fbb5 f1f3 	udiv	r1, r5, r3
 800403e:	fb03 5711 	mls	r7, r3, r1, r5
 8004042:	5dc7      	ldrb	r7, [r0, r7]
 8004044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004048:	462f      	mov	r7, r5
 800404a:	42bb      	cmp	r3, r7
 800404c:	460d      	mov	r5, r1
 800404e:	d9f4      	bls.n	800403a <_printf_i+0x11a>
 8004050:	2b08      	cmp	r3, #8
 8004052:	d10b      	bne.n	800406c <_printf_i+0x14c>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	07df      	lsls	r7, r3, #31
 8004058:	d508      	bpl.n	800406c <_printf_i+0x14c>
 800405a:	6923      	ldr	r3, [r4, #16]
 800405c:	6861      	ldr	r1, [r4, #4]
 800405e:	4299      	cmp	r1, r3
 8004060:	bfde      	ittt	le
 8004062:	2330      	movle	r3, #48	; 0x30
 8004064:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800406c:	1b92      	subs	r2, r2, r6
 800406e:	6122      	str	r2, [r4, #16]
 8004070:	f8cd a000 	str.w	sl, [sp]
 8004074:	464b      	mov	r3, r9
 8004076:	aa03      	add	r2, sp, #12
 8004078:	4621      	mov	r1, r4
 800407a:	4640      	mov	r0, r8
 800407c:	f7ff fee2 	bl	8003e44 <_printf_common>
 8004080:	3001      	adds	r0, #1
 8004082:	d14c      	bne.n	800411e <_printf_i+0x1fe>
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	b004      	add	sp, #16
 800408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800408e:	4835      	ldr	r0, [pc, #212]	; (8004164 <_printf_i+0x244>)
 8004090:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	680e      	ldr	r6, [r1, #0]
 8004098:	061f      	lsls	r7, r3, #24
 800409a:	f856 5b04 	ldr.w	r5, [r6], #4
 800409e:	600e      	str	r6, [r1, #0]
 80040a0:	d514      	bpl.n	80040cc <_printf_i+0x1ac>
 80040a2:	07d9      	lsls	r1, r3, #31
 80040a4:	bf44      	itt	mi
 80040a6:	f043 0320 	orrmi.w	r3, r3, #32
 80040aa:	6023      	strmi	r3, [r4, #0]
 80040ac:	b91d      	cbnz	r5, 80040b6 <_printf_i+0x196>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	f023 0320 	bic.w	r3, r3, #32
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	2310      	movs	r3, #16
 80040b8:	e7b0      	b.n	800401c <_printf_i+0xfc>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	f043 0320 	orr.w	r3, r3, #32
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	2378      	movs	r3, #120	; 0x78
 80040c4:	4828      	ldr	r0, [pc, #160]	; (8004168 <_printf_i+0x248>)
 80040c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040ca:	e7e3      	b.n	8004094 <_printf_i+0x174>
 80040cc:	065e      	lsls	r6, r3, #25
 80040ce:	bf48      	it	mi
 80040d0:	b2ad      	uxthmi	r5, r5
 80040d2:	e7e6      	b.n	80040a2 <_printf_i+0x182>
 80040d4:	4616      	mov	r6, r2
 80040d6:	e7bb      	b.n	8004050 <_printf_i+0x130>
 80040d8:	680b      	ldr	r3, [r1, #0]
 80040da:	6826      	ldr	r6, [r4, #0]
 80040dc:	6960      	ldr	r0, [r4, #20]
 80040de:	1d1d      	adds	r5, r3, #4
 80040e0:	600d      	str	r5, [r1, #0]
 80040e2:	0635      	lsls	r5, r6, #24
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	d501      	bpl.n	80040ec <_printf_i+0x1cc>
 80040e8:	6018      	str	r0, [r3, #0]
 80040ea:	e002      	b.n	80040f2 <_printf_i+0x1d2>
 80040ec:	0671      	lsls	r1, r6, #25
 80040ee:	d5fb      	bpl.n	80040e8 <_printf_i+0x1c8>
 80040f0:	8018      	strh	r0, [r3, #0]
 80040f2:	2300      	movs	r3, #0
 80040f4:	6123      	str	r3, [r4, #16]
 80040f6:	4616      	mov	r6, r2
 80040f8:	e7ba      	b.n	8004070 <_printf_i+0x150>
 80040fa:	680b      	ldr	r3, [r1, #0]
 80040fc:	1d1a      	adds	r2, r3, #4
 80040fe:	600a      	str	r2, [r1, #0]
 8004100:	681e      	ldr	r6, [r3, #0]
 8004102:	6862      	ldr	r2, [r4, #4]
 8004104:	2100      	movs	r1, #0
 8004106:	4630      	mov	r0, r6
 8004108:	f7fc f892 	bl	8000230 <memchr>
 800410c:	b108      	cbz	r0, 8004112 <_printf_i+0x1f2>
 800410e:	1b80      	subs	r0, r0, r6
 8004110:	6060      	str	r0, [r4, #4]
 8004112:	6863      	ldr	r3, [r4, #4]
 8004114:	6123      	str	r3, [r4, #16]
 8004116:	2300      	movs	r3, #0
 8004118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800411c:	e7a8      	b.n	8004070 <_printf_i+0x150>
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	4632      	mov	r2, r6
 8004122:	4649      	mov	r1, r9
 8004124:	4640      	mov	r0, r8
 8004126:	47d0      	blx	sl
 8004128:	3001      	adds	r0, #1
 800412a:	d0ab      	beq.n	8004084 <_printf_i+0x164>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	079b      	lsls	r3, r3, #30
 8004130:	d413      	bmi.n	800415a <_printf_i+0x23a>
 8004132:	68e0      	ldr	r0, [r4, #12]
 8004134:	9b03      	ldr	r3, [sp, #12]
 8004136:	4298      	cmp	r0, r3
 8004138:	bfb8      	it	lt
 800413a:	4618      	movlt	r0, r3
 800413c:	e7a4      	b.n	8004088 <_printf_i+0x168>
 800413e:	2301      	movs	r3, #1
 8004140:	4632      	mov	r2, r6
 8004142:	4649      	mov	r1, r9
 8004144:	4640      	mov	r0, r8
 8004146:	47d0      	blx	sl
 8004148:	3001      	adds	r0, #1
 800414a:	d09b      	beq.n	8004084 <_printf_i+0x164>
 800414c:	3501      	adds	r5, #1
 800414e:	68e3      	ldr	r3, [r4, #12]
 8004150:	9903      	ldr	r1, [sp, #12]
 8004152:	1a5b      	subs	r3, r3, r1
 8004154:	42ab      	cmp	r3, r5
 8004156:	dcf2      	bgt.n	800413e <_printf_i+0x21e>
 8004158:	e7eb      	b.n	8004132 <_printf_i+0x212>
 800415a:	2500      	movs	r5, #0
 800415c:	f104 0619 	add.w	r6, r4, #25
 8004160:	e7f5      	b.n	800414e <_printf_i+0x22e>
 8004162:	bf00      	nop
 8004164:	08004411 	.word	0x08004411
 8004168:	08004422 	.word	0x08004422

0800416c <memcpy>:
 800416c:	440a      	add	r2, r1
 800416e:	4291      	cmp	r1, r2
 8004170:	f100 33ff 	add.w	r3, r0, #4294967295
 8004174:	d100      	bne.n	8004178 <memcpy+0xc>
 8004176:	4770      	bx	lr
 8004178:	b510      	push	{r4, lr}
 800417a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800417e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004182:	4291      	cmp	r1, r2
 8004184:	d1f9      	bne.n	800417a <memcpy+0xe>
 8004186:	bd10      	pop	{r4, pc}

08004188 <memmove>:
 8004188:	4288      	cmp	r0, r1
 800418a:	b510      	push	{r4, lr}
 800418c:	eb01 0402 	add.w	r4, r1, r2
 8004190:	d902      	bls.n	8004198 <memmove+0x10>
 8004192:	4284      	cmp	r4, r0
 8004194:	4623      	mov	r3, r4
 8004196:	d807      	bhi.n	80041a8 <memmove+0x20>
 8004198:	1e43      	subs	r3, r0, #1
 800419a:	42a1      	cmp	r1, r4
 800419c:	d008      	beq.n	80041b0 <memmove+0x28>
 800419e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041a6:	e7f8      	b.n	800419a <memmove+0x12>
 80041a8:	4402      	add	r2, r0
 80041aa:	4601      	mov	r1, r0
 80041ac:	428a      	cmp	r2, r1
 80041ae:	d100      	bne.n	80041b2 <memmove+0x2a>
 80041b0:	bd10      	pop	{r4, pc}
 80041b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041ba:	e7f7      	b.n	80041ac <memmove+0x24>

080041bc <_free_r>:
 80041bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041be:	2900      	cmp	r1, #0
 80041c0:	d048      	beq.n	8004254 <_free_r+0x98>
 80041c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c6:	9001      	str	r0, [sp, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f1a1 0404 	sub.w	r4, r1, #4
 80041ce:	bfb8      	it	lt
 80041d0:	18e4      	addlt	r4, r4, r3
 80041d2:	f000 f8d3 	bl	800437c <__malloc_lock>
 80041d6:	4a20      	ldr	r2, [pc, #128]	; (8004258 <_free_r+0x9c>)
 80041d8:	9801      	ldr	r0, [sp, #4]
 80041da:	6813      	ldr	r3, [r2, #0]
 80041dc:	4615      	mov	r5, r2
 80041de:	b933      	cbnz	r3, 80041ee <_free_r+0x32>
 80041e0:	6063      	str	r3, [r4, #4]
 80041e2:	6014      	str	r4, [r2, #0]
 80041e4:	b003      	add	sp, #12
 80041e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041ea:	f000 b8cd 	b.w	8004388 <__malloc_unlock>
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	d90b      	bls.n	800420a <_free_r+0x4e>
 80041f2:	6821      	ldr	r1, [r4, #0]
 80041f4:	1862      	adds	r2, r4, r1
 80041f6:	4293      	cmp	r3, r2
 80041f8:	bf04      	itt	eq
 80041fa:	681a      	ldreq	r2, [r3, #0]
 80041fc:	685b      	ldreq	r3, [r3, #4]
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	bf04      	itt	eq
 8004202:	1852      	addeq	r2, r2, r1
 8004204:	6022      	streq	r2, [r4, #0]
 8004206:	602c      	str	r4, [r5, #0]
 8004208:	e7ec      	b.n	80041e4 <_free_r+0x28>
 800420a:	461a      	mov	r2, r3
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	b10b      	cbz	r3, 8004214 <_free_r+0x58>
 8004210:	42a3      	cmp	r3, r4
 8004212:	d9fa      	bls.n	800420a <_free_r+0x4e>
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	1855      	adds	r5, r2, r1
 8004218:	42a5      	cmp	r5, r4
 800421a:	d10b      	bne.n	8004234 <_free_r+0x78>
 800421c:	6824      	ldr	r4, [r4, #0]
 800421e:	4421      	add	r1, r4
 8004220:	1854      	adds	r4, r2, r1
 8004222:	42a3      	cmp	r3, r4
 8004224:	6011      	str	r1, [r2, #0]
 8004226:	d1dd      	bne.n	80041e4 <_free_r+0x28>
 8004228:	681c      	ldr	r4, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	6053      	str	r3, [r2, #4]
 800422e:	4421      	add	r1, r4
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	e7d7      	b.n	80041e4 <_free_r+0x28>
 8004234:	d902      	bls.n	800423c <_free_r+0x80>
 8004236:	230c      	movs	r3, #12
 8004238:	6003      	str	r3, [r0, #0]
 800423a:	e7d3      	b.n	80041e4 <_free_r+0x28>
 800423c:	6825      	ldr	r5, [r4, #0]
 800423e:	1961      	adds	r1, r4, r5
 8004240:	428b      	cmp	r3, r1
 8004242:	bf04      	itt	eq
 8004244:	6819      	ldreq	r1, [r3, #0]
 8004246:	685b      	ldreq	r3, [r3, #4]
 8004248:	6063      	str	r3, [r4, #4]
 800424a:	bf04      	itt	eq
 800424c:	1949      	addeq	r1, r1, r5
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	6054      	str	r4, [r2, #4]
 8004252:	e7c7      	b.n	80041e4 <_free_r+0x28>
 8004254:	b003      	add	sp, #12
 8004256:	bd30      	pop	{r4, r5, pc}
 8004258:	200000b0 	.word	0x200000b0

0800425c <_malloc_r>:
 800425c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425e:	1ccd      	adds	r5, r1, #3
 8004260:	f025 0503 	bic.w	r5, r5, #3
 8004264:	3508      	adds	r5, #8
 8004266:	2d0c      	cmp	r5, #12
 8004268:	bf38      	it	cc
 800426a:	250c      	movcc	r5, #12
 800426c:	2d00      	cmp	r5, #0
 800426e:	4606      	mov	r6, r0
 8004270:	db01      	blt.n	8004276 <_malloc_r+0x1a>
 8004272:	42a9      	cmp	r1, r5
 8004274:	d903      	bls.n	800427e <_malloc_r+0x22>
 8004276:	230c      	movs	r3, #12
 8004278:	6033      	str	r3, [r6, #0]
 800427a:	2000      	movs	r0, #0
 800427c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800427e:	f000 f87d 	bl	800437c <__malloc_lock>
 8004282:	4921      	ldr	r1, [pc, #132]	; (8004308 <_malloc_r+0xac>)
 8004284:	680a      	ldr	r2, [r1, #0]
 8004286:	4614      	mov	r4, r2
 8004288:	b99c      	cbnz	r4, 80042b2 <_malloc_r+0x56>
 800428a:	4f20      	ldr	r7, [pc, #128]	; (800430c <_malloc_r+0xb0>)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	b923      	cbnz	r3, 800429a <_malloc_r+0x3e>
 8004290:	4621      	mov	r1, r4
 8004292:	4630      	mov	r0, r6
 8004294:	f000 f862 	bl	800435c <_sbrk_r>
 8004298:	6038      	str	r0, [r7, #0]
 800429a:	4629      	mov	r1, r5
 800429c:	4630      	mov	r0, r6
 800429e:	f000 f85d 	bl	800435c <_sbrk_r>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	d123      	bne.n	80042ee <_malloc_r+0x92>
 80042a6:	230c      	movs	r3, #12
 80042a8:	6033      	str	r3, [r6, #0]
 80042aa:	4630      	mov	r0, r6
 80042ac:	f000 f86c 	bl	8004388 <__malloc_unlock>
 80042b0:	e7e3      	b.n	800427a <_malloc_r+0x1e>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	1b5b      	subs	r3, r3, r5
 80042b6:	d417      	bmi.n	80042e8 <_malloc_r+0x8c>
 80042b8:	2b0b      	cmp	r3, #11
 80042ba:	d903      	bls.n	80042c4 <_malloc_r+0x68>
 80042bc:	6023      	str	r3, [r4, #0]
 80042be:	441c      	add	r4, r3
 80042c0:	6025      	str	r5, [r4, #0]
 80042c2:	e004      	b.n	80042ce <_malloc_r+0x72>
 80042c4:	6863      	ldr	r3, [r4, #4]
 80042c6:	42a2      	cmp	r2, r4
 80042c8:	bf0c      	ite	eq
 80042ca:	600b      	streq	r3, [r1, #0]
 80042cc:	6053      	strne	r3, [r2, #4]
 80042ce:	4630      	mov	r0, r6
 80042d0:	f000 f85a 	bl	8004388 <__malloc_unlock>
 80042d4:	f104 000b 	add.w	r0, r4, #11
 80042d8:	1d23      	adds	r3, r4, #4
 80042da:	f020 0007 	bic.w	r0, r0, #7
 80042de:	1ac2      	subs	r2, r0, r3
 80042e0:	d0cc      	beq.n	800427c <_malloc_r+0x20>
 80042e2:	1a1b      	subs	r3, r3, r0
 80042e4:	50a3      	str	r3, [r4, r2]
 80042e6:	e7c9      	b.n	800427c <_malloc_r+0x20>
 80042e8:	4622      	mov	r2, r4
 80042ea:	6864      	ldr	r4, [r4, #4]
 80042ec:	e7cc      	b.n	8004288 <_malloc_r+0x2c>
 80042ee:	1cc4      	adds	r4, r0, #3
 80042f0:	f024 0403 	bic.w	r4, r4, #3
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d0e3      	beq.n	80042c0 <_malloc_r+0x64>
 80042f8:	1a21      	subs	r1, r4, r0
 80042fa:	4630      	mov	r0, r6
 80042fc:	f000 f82e 	bl	800435c <_sbrk_r>
 8004300:	3001      	adds	r0, #1
 8004302:	d1dd      	bne.n	80042c0 <_malloc_r+0x64>
 8004304:	e7cf      	b.n	80042a6 <_malloc_r+0x4a>
 8004306:	bf00      	nop
 8004308:	200000b0 	.word	0x200000b0
 800430c:	200000b4 	.word	0x200000b4

08004310 <_realloc_r>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	4607      	mov	r7, r0
 8004314:	4614      	mov	r4, r2
 8004316:	460e      	mov	r6, r1
 8004318:	b921      	cbnz	r1, 8004324 <_realloc_r+0x14>
 800431a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800431e:	4611      	mov	r1, r2
 8004320:	f7ff bf9c 	b.w	800425c <_malloc_r>
 8004324:	b922      	cbnz	r2, 8004330 <_realloc_r+0x20>
 8004326:	f7ff ff49 	bl	80041bc <_free_r>
 800432a:	4625      	mov	r5, r4
 800432c:	4628      	mov	r0, r5
 800432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004330:	f000 f830 	bl	8004394 <_malloc_usable_size_r>
 8004334:	42a0      	cmp	r0, r4
 8004336:	d20f      	bcs.n	8004358 <_realloc_r+0x48>
 8004338:	4621      	mov	r1, r4
 800433a:	4638      	mov	r0, r7
 800433c:	f7ff ff8e 	bl	800425c <_malloc_r>
 8004340:	4605      	mov	r5, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	d0f2      	beq.n	800432c <_realloc_r+0x1c>
 8004346:	4631      	mov	r1, r6
 8004348:	4622      	mov	r2, r4
 800434a:	f7ff ff0f 	bl	800416c <memcpy>
 800434e:	4631      	mov	r1, r6
 8004350:	4638      	mov	r0, r7
 8004352:	f7ff ff33 	bl	80041bc <_free_r>
 8004356:	e7e9      	b.n	800432c <_realloc_r+0x1c>
 8004358:	4635      	mov	r5, r6
 800435a:	e7e7      	b.n	800432c <_realloc_r+0x1c>

0800435c <_sbrk_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4d06      	ldr	r5, [pc, #24]	; (8004378 <_sbrk_r+0x1c>)
 8004360:	2300      	movs	r3, #0
 8004362:	4604      	mov	r4, r0
 8004364:	4608      	mov	r0, r1
 8004366:	602b      	str	r3, [r5, #0]
 8004368:	f7fc fb7a 	bl	8000a60 <_sbrk>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_sbrk_r+0x1a>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	b103      	cbz	r3, 8004376 <_sbrk_r+0x1a>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	200001c8 	.word	0x200001c8

0800437c <__malloc_lock>:
 800437c:	4801      	ldr	r0, [pc, #4]	; (8004384 <__malloc_lock+0x8>)
 800437e:	f000 b811 	b.w	80043a4 <__retarget_lock_acquire_recursive>
 8004382:	bf00      	nop
 8004384:	200001d0 	.word	0x200001d0

08004388 <__malloc_unlock>:
 8004388:	4801      	ldr	r0, [pc, #4]	; (8004390 <__malloc_unlock+0x8>)
 800438a:	f000 b80c 	b.w	80043a6 <__retarget_lock_release_recursive>
 800438e:	bf00      	nop
 8004390:	200001d0 	.word	0x200001d0

08004394 <_malloc_usable_size_r>:
 8004394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004398:	1f18      	subs	r0, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	bfbc      	itt	lt
 800439e:	580b      	ldrlt	r3, [r1, r0]
 80043a0:	18c0      	addlt	r0, r0, r3
 80043a2:	4770      	bx	lr

080043a4 <__retarget_lock_acquire_recursive>:
 80043a4:	4770      	bx	lr

080043a6 <__retarget_lock_release_recursive>:
 80043a6:	4770      	bx	lr

080043a8 <_init>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr

080043b4 <_fini>:
 80043b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b6:	bf00      	nop
 80043b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ba:	bc08      	pop	{r3}
 80043bc:	469e      	mov	lr, r3
 80043be:	4770      	bx	lr
