
TP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000425c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d8  080045d8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e0  080045e0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080045e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000008c  08004674  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004674  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123a8  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225d  00000000  00000000  00032464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000346c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c30  00000000  00000000  000353e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002667f  00000000  00000000  00036010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011117  00000000  00000000  0005c68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd3a  00000000  00000000  0006d7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d4e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037b8  00000000  00000000  0015d534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800440c 	.word	0x0800440c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000090 	.word	0x20000090
 8000204:	0800440c 	.word	0x0800440c

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <__aeabi_drsub>:
 800021c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000220:	e002      	b.n	8000228 <__adddf3>
 8000222:	bf00      	nop

08000224 <__aeabi_dsub>:
 8000224:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000228 <__adddf3>:
 8000228:	b530      	push	{r4, r5, lr}
 800022a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000232:	ea94 0f05 	teq	r4, r5
 8000236:	bf08      	it	eq
 8000238:	ea90 0f02 	teqeq	r0, r2
 800023c:	bf1f      	itttt	ne
 800023e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000242:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000246:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024e:	f000 80e2 	beq.w	8000416 <__adddf3+0x1ee>
 8000252:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000256:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025a:	bfb8      	it	lt
 800025c:	426d      	neglt	r5, r5
 800025e:	dd0c      	ble.n	800027a <__adddf3+0x52>
 8000260:	442c      	add	r4, r5
 8000262:	ea80 0202 	eor.w	r2, r0, r2
 8000266:	ea81 0303 	eor.w	r3, r1, r3
 800026a:	ea82 0000 	eor.w	r0, r2, r0
 800026e:	ea83 0101 	eor.w	r1, r3, r1
 8000272:	ea80 0202 	eor.w	r2, r0, r2
 8000276:	ea81 0303 	eor.w	r3, r1, r3
 800027a:	2d36      	cmp	r5, #54	; 0x36
 800027c:	bf88      	it	hi
 800027e:	bd30      	pophi	{r4, r5, pc}
 8000280:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000284:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000288:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800028c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x70>
 8000292:	4240      	negs	r0, r0
 8000294:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000298:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800029c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x84>
 80002a6:	4252      	negs	r2, r2
 80002a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ac:	ea94 0f05 	teq	r4, r5
 80002b0:	f000 80a7 	beq.w	8000402 <__adddf3+0x1da>
 80002b4:	f1a4 0401 	sub.w	r4, r4, #1
 80002b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002bc:	db0d      	blt.n	80002da <__adddf3+0xb2>
 80002be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c2:	fa22 f205 	lsr.w	r2, r2, r5
 80002c6:	1880      	adds	r0, r0, r2
 80002c8:	f141 0100 	adc.w	r1, r1, #0
 80002cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d0:	1880      	adds	r0, r0, r2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	4159      	adcs	r1, r3
 80002d8:	e00e      	b.n	80002f8 <__adddf3+0xd0>
 80002da:	f1a5 0520 	sub.w	r5, r5, #32
 80002de:	f10e 0e20 	add.w	lr, lr, #32
 80002e2:	2a01      	cmp	r2, #1
 80002e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e8:	bf28      	it	cs
 80002ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	18c0      	adds	r0, r0, r3
 80002f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002fc:	d507      	bpl.n	800030e <__adddf3+0xe6>
 80002fe:	f04f 0e00 	mov.w	lr, #0
 8000302:	f1dc 0c00 	rsbs	ip, ip, #0
 8000306:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030a:	eb6e 0101 	sbc.w	r1, lr, r1
 800030e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000312:	d31b      	bcc.n	800034c <__adddf3+0x124>
 8000314:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000318:	d30c      	bcc.n	8000334 <__adddf3+0x10c>
 800031a:	0849      	lsrs	r1, r1, #1
 800031c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000320:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000324:	f104 0401 	add.w	r4, r4, #1
 8000328:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800032c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000330:	f080 809a 	bcs.w	8000468 <__adddf3+0x240>
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	bf08      	it	eq
 800033a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033e:	f150 0000 	adcs.w	r0, r0, #0
 8000342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000346:	ea41 0105 	orr.w	r1, r1, r5
 800034a:	bd30      	pop	{r4, r5, pc}
 800034c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000350:	4140      	adcs	r0, r0
 8000352:	eb41 0101 	adc.w	r1, r1, r1
 8000356:	3c01      	subs	r4, #1
 8000358:	bf28      	it	cs
 800035a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035e:	d2e9      	bcs.n	8000334 <__adddf3+0x10c>
 8000360:	f091 0f00 	teq	r1, #0
 8000364:	bf04      	itt	eq
 8000366:	4601      	moveq	r1, r0
 8000368:	2000      	moveq	r0, #0
 800036a:	fab1 f381 	clz	r3, r1
 800036e:	bf08      	it	eq
 8000370:	3320      	addeq	r3, #32
 8000372:	f1a3 030b 	sub.w	r3, r3, #11
 8000376:	f1b3 0220 	subs.w	r2, r3, #32
 800037a:	da0c      	bge.n	8000396 <__adddf3+0x16e>
 800037c:	320c      	adds	r2, #12
 800037e:	dd08      	ble.n	8000392 <__adddf3+0x16a>
 8000380:	f102 0c14 	add.w	ip, r2, #20
 8000384:	f1c2 020c 	rsb	r2, r2, #12
 8000388:	fa01 f00c 	lsl.w	r0, r1, ip
 800038c:	fa21 f102 	lsr.w	r1, r1, r2
 8000390:	e00c      	b.n	80003ac <__adddf3+0x184>
 8000392:	f102 0214 	add.w	r2, r2, #20
 8000396:	bfd8      	it	le
 8000398:	f1c2 0c20 	rsble	ip, r2, #32
 800039c:	fa01 f102 	lsl.w	r1, r1, r2
 80003a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a4:	bfdc      	itt	le
 80003a6:	ea41 010c 	orrle.w	r1, r1, ip
 80003aa:	4090      	lslle	r0, r2
 80003ac:	1ae4      	subs	r4, r4, r3
 80003ae:	bfa2      	ittt	ge
 80003b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b4:	4329      	orrge	r1, r5
 80003b6:	bd30      	popge	{r4, r5, pc}
 80003b8:	ea6f 0404 	mvn.w	r4, r4
 80003bc:	3c1f      	subs	r4, #31
 80003be:	da1c      	bge.n	80003fa <__adddf3+0x1d2>
 80003c0:	340c      	adds	r4, #12
 80003c2:	dc0e      	bgt.n	80003e2 <__adddf3+0x1ba>
 80003c4:	f104 0414 	add.w	r4, r4, #20
 80003c8:	f1c4 0220 	rsb	r2, r4, #32
 80003cc:	fa20 f004 	lsr.w	r0, r0, r4
 80003d0:	fa01 f302 	lsl.w	r3, r1, r2
 80003d4:	ea40 0003 	orr.w	r0, r0, r3
 80003d8:	fa21 f304 	lsr.w	r3, r1, r4
 80003dc:	ea45 0103 	orr.w	r1, r5, r3
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f1c4 040c 	rsb	r4, r4, #12
 80003e6:	f1c4 0220 	rsb	r2, r4, #32
 80003ea:	fa20 f002 	lsr.w	r0, r0, r2
 80003ee:	fa01 f304 	lsl.w	r3, r1, r4
 80003f2:	ea40 0003 	orr.w	r0, r0, r3
 80003f6:	4629      	mov	r1, r5
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	fa21 f004 	lsr.w	r0, r1, r4
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	f094 0f00 	teq	r4, #0
 8000406:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040a:	bf06      	itte	eq
 800040c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000410:	3401      	addeq	r4, #1
 8000412:	3d01      	subne	r5, #1
 8000414:	e74e      	b.n	80002b4 <__adddf3+0x8c>
 8000416:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041a:	bf18      	it	ne
 800041c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000420:	d029      	beq.n	8000476 <__adddf3+0x24e>
 8000422:	ea94 0f05 	teq	r4, r5
 8000426:	bf08      	it	eq
 8000428:	ea90 0f02 	teqeq	r0, r2
 800042c:	d005      	beq.n	800043a <__adddf3+0x212>
 800042e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000432:	bf04      	itt	eq
 8000434:	4619      	moveq	r1, r3
 8000436:	4610      	moveq	r0, r2
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea91 0f03 	teq	r1, r3
 800043e:	bf1e      	ittt	ne
 8000440:	2100      	movne	r1, #0
 8000442:	2000      	movne	r0, #0
 8000444:	bd30      	popne	{r4, r5, pc}
 8000446:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044a:	d105      	bne.n	8000458 <__adddf3+0x230>
 800044c:	0040      	lsls	r0, r0, #1
 800044e:	4149      	adcs	r1, r1
 8000450:	bf28      	it	cs
 8000452:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000456:	bd30      	pop	{r4, r5, pc}
 8000458:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800045c:	bf3c      	itt	cc
 800045e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000462:	bd30      	popcc	{r4, r5, pc}
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800046c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047a:	bf1a      	itte	ne
 800047c:	4619      	movne	r1, r3
 800047e:	4610      	movne	r0, r2
 8000480:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000484:	bf1c      	itt	ne
 8000486:	460b      	movne	r3, r1
 8000488:	4602      	movne	r2, r0
 800048a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048e:	bf06      	itte	eq
 8000490:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000494:	ea91 0f03 	teqeq	r1, r3
 8000498:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	bf00      	nop

080004a0 <__aeabi_ui2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f04f 0500 	mov.w	r5, #0
 80004b8:	f04f 0100 	mov.w	r1, #0
 80004bc:	e750      	b.n	8000360 <__adddf3+0x138>
 80004be:	bf00      	nop

080004c0 <__aeabi_i2d>:
 80004c0:	f090 0f00 	teq	r0, #0
 80004c4:	bf04      	itt	eq
 80004c6:	2100      	moveq	r1, #0
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d8:	bf48      	it	mi
 80004da:	4240      	negmi	r0, r0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e73e      	b.n	8000360 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_f2d>:
 80004e4:	0042      	lsls	r2, r0, #1
 80004e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f2:	bf1f      	itttt	ne
 80004f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000500:	4770      	bxne	lr
 8000502:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000506:	bf08      	it	eq
 8000508:	4770      	bxeq	lr
 800050a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050e:	bf04      	itt	eq
 8000510:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 7460 	mov.w	r4, #896	; 0x380
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000524:	e71c      	b.n	8000360 <__adddf3+0x138>
 8000526:	bf00      	nop

08000528 <__aeabi_ul2d>:
 8000528:	ea50 0201 	orrs.w	r2, r0, r1
 800052c:	bf08      	it	eq
 800052e:	4770      	bxeq	lr
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	e00a      	b.n	800054e <__aeabi_l2d+0x16>

08000538 <__aeabi_l2d>:
 8000538:	ea50 0201 	orrs.w	r2, r0, r1
 800053c:	bf08      	it	eq
 800053e:	4770      	bxeq	lr
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000546:	d502      	bpl.n	800054e <__aeabi_l2d+0x16>
 8000548:	4240      	negs	r0, r0
 800054a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000552:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000556:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055a:	f43f aed8 	beq.w	800030e <__adddf3+0xe6>
 800055e:	f04f 0203 	mov.w	r2, #3
 8000562:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000566:	bf18      	it	ne
 8000568:	3203      	addne	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000576:	f1c2 0320 	rsb	r3, r2, #32
 800057a:	fa00 fc03 	lsl.w	ip, r0, r3
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 fe03 	lsl.w	lr, r1, r3
 8000586:	ea40 000e 	orr.w	r0, r0, lr
 800058a:	fa21 f102 	lsr.w	r1, r1, r2
 800058e:	4414      	add	r4, r2
 8000590:	e6bd      	b.n	800030e <__adddf3+0xe6>
 8000592:	bf00      	nop

08000594 <__aeabi_dmul>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a2:	bf1d      	ittte	ne
 80005a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a8:	ea94 0f0c 	teqne	r4, ip
 80005ac:	ea95 0f0c 	teqne	r5, ip
 80005b0:	f000 f8de 	bleq	8000770 <__aeabi_dmul+0x1dc>
 80005b4:	442c      	add	r4, r5
 80005b6:	ea81 0603 	eor.w	r6, r1, r3
 80005ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c6:	bf18      	it	ne
 80005c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d4:	d038      	beq.n	8000648 <__aeabi_dmul+0xb4>
 80005d6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ea:	f04f 0600 	mov.w	r6, #0
 80005ee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f2:	f09c 0f00 	teq	ip, #0
 80005f6:	bf18      	it	ne
 80005f8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000600:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000604:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000608:	d204      	bcs.n	8000614 <__aeabi_dmul+0x80>
 800060a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060e:	416d      	adcs	r5, r5
 8000610:	eb46 0606 	adc.w	r6, r6, r6
 8000614:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000618:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800061c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000620:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000624:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000628:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800062c:	bf88      	it	hi
 800062e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000632:	d81e      	bhi.n	8000672 <__aeabi_dmul+0xde>
 8000634:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800064c:	ea46 0101 	orr.w	r1, r6, r1
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	ea81 0103 	eor.w	r1, r1, r3
 8000658:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800065c:	bfc2      	ittt	gt
 800065e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000662:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000666:	bd70      	popgt	{r4, r5, r6, pc}
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f04f 0e00 	mov.w	lr, #0
 8000670:	3c01      	subs	r4, #1
 8000672:	f300 80ab 	bgt.w	80007cc <__aeabi_dmul+0x238>
 8000676:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067a:	bfde      	ittt	le
 800067c:	2000      	movle	r0, #0
 800067e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000682:	bd70      	pople	{r4, r5, r6, pc}
 8000684:	f1c4 0400 	rsb	r4, r4, #0
 8000688:	3c20      	subs	r4, #32
 800068a:	da35      	bge.n	80006f8 <__aeabi_dmul+0x164>
 800068c:	340c      	adds	r4, #12
 800068e:	dc1b      	bgt.n	80006c8 <__aeabi_dmul+0x134>
 8000690:	f104 0414 	add.w	r4, r4, #20
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f305 	lsl.w	r3, r0, r5
 800069c:	fa20 f004 	lsr.w	r0, r0, r4
 80006a0:	fa01 f205 	lsl.w	r2, r1, r5
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	fa21 f604 	lsr.w	r6, r1, r4
 80006b8:	eb42 0106 	adc.w	r1, r2, r6
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 040c 	rsb	r4, r4, #12
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f304 	lsl.w	r3, r0, r4
 80006d4:	fa20 f005 	lsr.w	r0, r0, r5
 80006d8:	fa01 f204 	lsl.w	r2, r1, r4
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	f141 0100 	adc.w	r1, r1, #0
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f205 	lsl.w	r2, r0, r5
 8000700:	ea4e 0e02 	orr.w	lr, lr, r2
 8000704:	fa20 f304 	lsr.w	r3, r0, r4
 8000708:	fa01 f205 	lsl.w	r2, r1, r5
 800070c:	ea43 0302 	orr.w	r3, r3, r2
 8000710:	fa21 f004 	lsr.w	r0, r1, r4
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	fa21 f204 	lsr.w	r2, r1, r4
 800071c:	ea20 0002 	bic.w	r0, r0, r2
 8000720:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f094 0f00 	teq	r4, #0
 8000734:	d10f      	bne.n	8000756 <__aeabi_dmul+0x1c2>
 8000736:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073a:	0040      	lsls	r0, r0, #1
 800073c:	eb41 0101 	adc.w	r1, r1, r1
 8000740:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3c01      	subeq	r4, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1a6>
 800074a:	ea41 0106 	orr.w	r1, r1, r6
 800074e:	f095 0f00 	teq	r5, #0
 8000752:	bf18      	it	ne
 8000754:	4770      	bxne	lr
 8000756:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075a:	0052      	lsls	r2, r2, #1
 800075c:	eb43 0303 	adc.w	r3, r3, r3
 8000760:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000764:	bf08      	it	eq
 8000766:	3d01      	subeq	r5, #1
 8000768:	d0f7      	beq.n	800075a <__aeabi_dmul+0x1c6>
 800076a:	ea43 0306 	orr.w	r3, r3, r6
 800076e:	4770      	bx	lr
 8000770:	ea94 0f0c 	teq	r4, ip
 8000774:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000778:	bf18      	it	ne
 800077a:	ea95 0f0c 	teqne	r5, ip
 800077e:	d00c      	beq.n	800079a <__aeabi_dmul+0x206>
 8000780:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000784:	bf18      	it	ne
 8000786:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078a:	d1d1      	bne.n	8000730 <__aeabi_dmul+0x19c>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079e:	bf06      	itte	eq
 80007a0:	4610      	moveq	r0, r2
 80007a2:	4619      	moveq	r1, r3
 80007a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a8:	d019      	beq.n	80007de <__aeabi_dmul+0x24a>
 80007aa:	ea94 0f0c 	teq	r4, ip
 80007ae:	d102      	bne.n	80007b6 <__aeabi_dmul+0x222>
 80007b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b4:	d113      	bne.n	80007de <__aeabi_dmul+0x24a>
 80007b6:	ea95 0f0c 	teq	r5, ip
 80007ba:	d105      	bne.n	80007c8 <__aeabi_dmul+0x234>
 80007bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c0:	bf1c      	itt	ne
 80007c2:	4610      	movne	r0, r2
 80007c4:	4619      	movne	r1, r3
 80007c6:	d10a      	bne.n	80007de <__aeabi_dmul+0x24a>
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d8:	f04f 0000 	mov.w	r0, #0
 80007dc:	bd70      	pop	{r4, r5, r6, pc}
 80007de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e6:	bd70      	pop	{r4, r5, r6, pc}

080007e8 <__aeabi_ddiv>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f6:	bf1d      	ittte	ne
 80007f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007fc:	ea94 0f0c 	teqne	r4, ip
 8000800:	ea95 0f0c 	teqne	r5, ip
 8000804:	f000 f8a7 	bleq	8000956 <__aeabi_ddiv+0x16e>
 8000808:	eba4 0405 	sub.w	r4, r4, r5
 800080c:	ea81 0e03 	eor.w	lr, r1, r3
 8000810:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000814:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000818:	f000 8088 	beq.w	800092c <__aeabi_ddiv+0x144>
 800081c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000820:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000824:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000828:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800082c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000830:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000834:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000838:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800083c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000840:	429d      	cmp	r5, r3
 8000842:	bf08      	it	eq
 8000844:	4296      	cmpeq	r6, r2
 8000846:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084e:	d202      	bcs.n	8000856 <__aeabi_ddiv+0x6e>
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	1ab6      	subs	r6, r6, r2
 8000858:	eb65 0503 	sbc.w	r5, r5, r3
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000866:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 000c 	orrcs.w	r0, r0, ip
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c8:	d018      	beq.n	80008fc <__aeabi_ddiv+0x114>
 80008ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e6:	d1c0      	bne.n	800086a <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	d10b      	bne.n	8000906 <__aeabi_ddiv+0x11e>
 80008ee:	ea41 0100 	orr.w	r1, r1, r0
 80008f2:	f04f 0000 	mov.w	r0, #0
 80008f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fa:	e7b6      	b.n	800086a <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	bf04      	itt	eq
 8000902:	4301      	orreq	r1, r0
 8000904:	2000      	moveq	r0, #0
 8000906:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090a:	bf88      	it	hi
 800090c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000910:	f63f aeaf 	bhi.w	8000672 <__aeabi_dmul+0xde>
 8000914:	ebb5 0c03 	subs.w	ip, r5, r3
 8000918:	bf04      	itt	eq
 800091a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000922:	f150 0000 	adcs.w	r0, r0, #0
 8000926:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092a:	bd70      	pop	{r4, r5, r6, pc}
 800092c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000930:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000934:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000938:	bfc2      	ittt	gt
 800093a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000942:	bd70      	popgt	{r4, r5, r6, pc}
 8000944:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000948:	f04f 0e00 	mov.w	lr, #0
 800094c:	3c01      	subs	r4, #1
 800094e:	e690      	b.n	8000672 <__aeabi_dmul+0xde>
 8000950:	ea45 0e06 	orr.w	lr, r5, r6
 8000954:	e68d      	b.n	8000672 <__aeabi_dmul+0xde>
 8000956:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095a:	ea94 0f0c 	teq	r4, ip
 800095e:	bf08      	it	eq
 8000960:	ea95 0f0c 	teqeq	r5, ip
 8000964:	f43f af3b 	beq.w	80007de <__aeabi_dmul+0x24a>
 8000968:	ea94 0f0c 	teq	r4, ip
 800096c:	d10a      	bne.n	8000984 <__aeabi_ddiv+0x19c>
 800096e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000972:	f47f af34 	bne.w	80007de <__aeabi_dmul+0x24a>
 8000976:	ea95 0f0c 	teq	r5, ip
 800097a:	f47f af25 	bne.w	80007c8 <__aeabi_dmul+0x234>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e72c      	b.n	80007de <__aeabi_dmul+0x24a>
 8000984:	ea95 0f0c 	teq	r5, ip
 8000988:	d106      	bne.n	8000998 <__aeabi_ddiv+0x1b0>
 800098a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098e:	f43f aefd 	beq.w	800078c <__aeabi_dmul+0x1f8>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e722      	b.n	80007de <__aeabi_dmul+0x24a>
 8000998:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800099c:	bf18      	it	ne
 800099e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a2:	f47f aec5 	bne.w	8000730 <__aeabi_dmul+0x19c>
 80009a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009aa:	f47f af0d 	bne.w	80007c8 <__aeabi_dmul+0x234>
 80009ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b2:	f47f aeeb 	bne.w	800078c <__aeabi_dmul+0x1f8>
 80009b6:	e712      	b.n	80007de <__aeabi_dmul+0x24a>

080009b8 <__aeabi_d2iz>:
 80009b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009c0:	d215      	bcs.n	80009ee <__aeabi_d2iz+0x36>
 80009c2:	d511      	bpl.n	80009e8 <__aeabi_d2iz+0x30>
 80009c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009cc:	d912      	bls.n	80009f4 <__aeabi_d2iz+0x3c>
 80009ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	fa23 f002 	lsr.w	r0, r3, r2
 80009e2:	bf18      	it	ne
 80009e4:	4240      	negne	r0, r0
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f2:	d105      	bne.n	8000a00 <__aeabi_d2iz+0x48>
 80009f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	bf08      	it	eq
 80009fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fe:	4770      	bx	lr
 8000a00:	f04f 0000 	mov.w	r0, #0
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_uldivmod>:
 8000a08:	b953      	cbnz	r3, 8000a20 <__aeabi_uldivmod+0x18>
 8000a0a:	b94a      	cbnz	r2, 8000a20 <__aeabi_uldivmod+0x18>
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	bf08      	it	eq
 8000a10:	2800      	cmpeq	r0, #0
 8000a12:	bf1c      	itt	ne
 8000a14:	f04f 31ff 	movne.w	r1, #4294967295
 8000a18:	f04f 30ff 	movne.w	r0, #4294967295
 8000a1c:	f000 b96e 	b.w	8000cfc <__aeabi_idiv0>
 8000a20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a28:	f000 f806 	bl	8000a38 <__udivmoddi4>
 8000a2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a34:	b004      	add	sp, #16
 8000a36:	4770      	bx	lr

08000a38 <__udivmoddi4>:
 8000a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a3c:	9d08      	ldr	r5, [sp, #32]
 8000a3e:	4604      	mov	r4, r0
 8000a40:	468c      	mov	ip, r1
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	f040 8083 	bne.w	8000b4e <__udivmoddi4+0x116>
 8000a48:	428a      	cmp	r2, r1
 8000a4a:	4617      	mov	r7, r2
 8000a4c:	d947      	bls.n	8000ade <__udivmoddi4+0xa6>
 8000a4e:	fab2 f282 	clz	r2, r2
 8000a52:	b142      	cbz	r2, 8000a66 <__udivmoddi4+0x2e>
 8000a54:	f1c2 0020 	rsb	r0, r2, #32
 8000a58:	fa24 f000 	lsr.w	r0, r4, r0
 8000a5c:	4091      	lsls	r1, r2
 8000a5e:	4097      	lsls	r7, r2
 8000a60:	ea40 0c01 	orr.w	ip, r0, r1
 8000a64:	4094      	lsls	r4, r2
 8000a66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6a:	0c23      	lsrs	r3, r4, #16
 8000a6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000a70:	fa1f fe87 	uxth.w	lr, r7
 8000a74:	fb08 c116 	mls	r1, r8, r6, ip
 8000a78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000a80:	4299      	cmp	r1, r3
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x60>
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 8119 	bcs.w	8000cc0 <__udivmoddi4+0x288>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 8116 	bls.w	8000cc0 <__udivmoddi4+0x288>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	443b      	add	r3, r7
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aac:	45a6      	cmp	lr, r4
 8000aae:	d909      	bls.n	8000ac4 <__udivmoddi4+0x8c>
 8000ab0:	193c      	adds	r4, r7, r4
 8000ab2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab6:	f080 8105 	bcs.w	8000cc4 <__udivmoddi4+0x28c>
 8000aba:	45a6      	cmp	lr, r4
 8000abc:	f240 8102 	bls.w	8000cc4 <__udivmoddi4+0x28c>
 8000ac0:	3802      	subs	r0, #2
 8000ac2:	443c      	add	r4, r7
 8000ac4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac8:	eba4 040e 	sub.w	r4, r4, lr
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa0>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	b902      	cbnz	r2, 8000ae2 <__udivmoddi4+0xaa>
 8000ae0:	deff      	udf	#255	; 0xff
 8000ae2:	fab2 f282 	clz	r2, r2
 8000ae6:	2a00      	cmp	r2, #0
 8000ae8:	d150      	bne.n	8000b8c <__udivmoddi4+0x154>
 8000aea:	1bcb      	subs	r3, r1, r7
 8000aec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af0:	fa1f f887 	uxth.w	r8, r7
 8000af4:	2601      	movs	r6, #1
 8000af6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afa:	0c21      	lsrs	r1, r4, #16
 8000afc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b04:	fb08 f30c 	mul.w	r3, r8, ip
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d907      	bls.n	8000b1c <__udivmoddi4+0xe4>
 8000b0c:	1879      	adds	r1, r7, r1
 8000b0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0xe2>
 8000b14:	428b      	cmp	r3, r1
 8000b16:	f200 80e9 	bhi.w	8000cec <__udivmoddi4+0x2b4>
 8000b1a:	4684      	mov	ip, r0
 8000b1c:	1ac9      	subs	r1, r1, r3
 8000b1e:	b2a3      	uxth	r3, r4
 8000b20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b2c:	fb08 f800 	mul.w	r8, r8, r0
 8000b30:	45a0      	cmp	r8, r4
 8000b32:	d907      	bls.n	8000b44 <__udivmoddi4+0x10c>
 8000b34:	193c      	adds	r4, r7, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	d202      	bcs.n	8000b42 <__udivmoddi4+0x10a>
 8000b3c:	45a0      	cmp	r8, r4
 8000b3e:	f200 80d9 	bhi.w	8000cf4 <__udivmoddi4+0x2bc>
 8000b42:	4618      	mov	r0, r3
 8000b44:	eba4 0408 	sub.w	r4, r4, r8
 8000b48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b4c:	e7bf      	b.n	8000ace <__udivmoddi4+0x96>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d909      	bls.n	8000b66 <__udivmoddi4+0x12e>
 8000b52:	2d00      	cmp	r5, #0
 8000b54:	f000 80b1 	beq.w	8000cba <__udivmoddi4+0x282>
 8000b58:	2600      	movs	r6, #0
 8000b5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5e:	4630      	mov	r0, r6
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	fab3 f683 	clz	r6, r3
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d14a      	bne.n	8000c04 <__udivmoddi4+0x1cc>
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d302      	bcc.n	8000b78 <__udivmoddi4+0x140>
 8000b72:	4282      	cmp	r2, r0
 8000b74:	f200 80b8 	bhi.w	8000ce8 <__udivmoddi4+0x2b0>
 8000b78:	1a84      	subs	r4, r0, r2
 8000b7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7e:	2001      	movs	r0, #1
 8000b80:	468c      	mov	ip, r1
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d0a8      	beq.n	8000ad8 <__udivmoddi4+0xa0>
 8000b86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8a:	e7a5      	b.n	8000ad8 <__udivmoddi4+0xa0>
 8000b8c:	f1c2 0320 	rsb	r3, r2, #32
 8000b90:	fa20 f603 	lsr.w	r6, r0, r3
 8000b94:	4097      	lsls	r7, r2
 8000b96:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9e:	40d9      	lsrs	r1, r3
 8000ba0:	4330      	orrs	r0, r6
 8000ba2:	0c03      	lsrs	r3, r0, #16
 8000ba4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba8:	fa1f f887 	uxth.w	r8, r7
 8000bac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f108 	mul.w	r1, r6, r8
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	fa04 f402 	lsl.w	r4, r4, r2
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x19c>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc6:	f080 808d 	bcs.w	8000ce4 <__udivmoddi4+0x2ac>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 808a 	bls.w	8000ce4 <__udivmoddi4+0x2ac>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b281      	uxth	r1, r0
 8000bd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bdc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be4:	fb00 f308 	mul.w	r3, r0, r8
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d907      	bls.n	8000bfc <__udivmoddi4+0x1c4>
 8000bec:	1879      	adds	r1, r7, r1
 8000bee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf2:	d273      	bcs.n	8000cdc <__udivmoddi4+0x2a4>
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	d971      	bls.n	8000cdc <__udivmoddi4+0x2a4>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	4439      	add	r1, r7
 8000bfc:	1acb      	subs	r3, r1, r3
 8000bfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c02:	e778      	b.n	8000af6 <__udivmoddi4+0xbe>
 8000c04:	f1c6 0c20 	rsb	ip, r6, #32
 8000c08:	fa03 f406 	lsl.w	r4, r3, r6
 8000c0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c10:	431c      	orrs	r4, r3
 8000c12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c16:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c22:	431f      	orrs	r7, r3
 8000c24:	0c3b      	lsrs	r3, r7, #16
 8000c26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2a:	fa1f f884 	uxth.w	r8, r4
 8000c2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c36:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3a:	458a      	cmp	sl, r1
 8000c3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000c40:	fa00 f306 	lsl.w	r3, r0, r6
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x220>
 8000c46:	1861      	adds	r1, r4, r1
 8000c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c4c:	d248      	bcs.n	8000ce0 <__udivmoddi4+0x2a8>
 8000c4e:	458a      	cmp	sl, r1
 8000c50:	d946      	bls.n	8000ce0 <__udivmoddi4+0x2a8>
 8000c52:	f1a9 0902 	sub.w	r9, r9, #2
 8000c56:	4421      	add	r1, r4
 8000c58:	eba1 010a 	sub.w	r1, r1, sl
 8000c5c:	b2bf      	uxth	r7, r7
 8000c5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6a:	fb00 f808 	mul.w	r8, r0, r8
 8000c6e:	45b8      	cmp	r8, r7
 8000c70:	d907      	bls.n	8000c82 <__udivmoddi4+0x24a>
 8000c72:	19e7      	adds	r7, r4, r7
 8000c74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c78:	d22e      	bcs.n	8000cd8 <__udivmoddi4+0x2a0>
 8000c7a:	45b8      	cmp	r8, r7
 8000c7c:	d92c      	bls.n	8000cd8 <__udivmoddi4+0x2a0>
 8000c7e:	3802      	subs	r0, #2
 8000c80:	4427      	add	r7, r4
 8000c82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c86:	eba7 0708 	sub.w	r7, r7, r8
 8000c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8e:	454f      	cmp	r7, r9
 8000c90:	46c6      	mov	lr, r8
 8000c92:	4649      	mov	r1, r9
 8000c94:	d31a      	bcc.n	8000ccc <__udivmoddi4+0x294>
 8000c96:	d017      	beq.n	8000cc8 <__udivmoddi4+0x290>
 8000c98:	b15d      	cbz	r5, 8000cb2 <__udivmoddi4+0x27a>
 8000c9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca6:	40f2      	lsrs	r2, r6
 8000ca8:	ea4c 0202 	orr.w	r2, ip, r2
 8000cac:	40f7      	lsrs	r7, r6
 8000cae:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb2:	2600      	movs	r6, #0
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	462e      	mov	r6, r5
 8000cbc:	4628      	mov	r0, r5
 8000cbe:	e70b      	b.n	8000ad8 <__udivmoddi4+0xa0>
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	e6e9      	b.n	8000a98 <__udivmoddi4+0x60>
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	e6fd      	b.n	8000ac4 <__udivmoddi4+0x8c>
 8000cc8:	4543      	cmp	r3, r8
 8000cca:	d2e5      	bcs.n	8000c98 <__udivmoddi4+0x260>
 8000ccc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd0:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd4:	3801      	subs	r0, #1
 8000cd6:	e7df      	b.n	8000c98 <__udivmoddi4+0x260>
 8000cd8:	4608      	mov	r0, r1
 8000cda:	e7d2      	b.n	8000c82 <__udivmoddi4+0x24a>
 8000cdc:	4660      	mov	r0, ip
 8000cde:	e78d      	b.n	8000bfc <__udivmoddi4+0x1c4>
 8000ce0:	4681      	mov	r9, r0
 8000ce2:	e7b9      	b.n	8000c58 <__udivmoddi4+0x220>
 8000ce4:	4666      	mov	r6, ip
 8000ce6:	e775      	b.n	8000bd4 <__udivmoddi4+0x19c>
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e74a      	b.n	8000b82 <__udivmoddi4+0x14a>
 8000cec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf0:	4439      	add	r1, r7
 8000cf2:	e713      	b.n	8000b1c <__udivmoddi4+0xe4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	443c      	add	r4, r7
 8000cf8:	e724      	b.n	8000b44 <__udivmoddi4+0x10c>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d46:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d7c:	f000 ff06 	bl	8001b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d80:	2302      	movs	r3, #2
 8000d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d98:	f000 fd34 	bl	8001804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton_Pin;
 8000d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Bouton_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <MX_GPIO_Init+0xd4>)
 8000db4:	f000 fd26 	bl	8001804 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2028      	movs	r0, #40	; 0x28
 8000dbe:	f000 fcea 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dc2:	2028      	movs	r0, #40	; 0x28
 8000dc4:	f000 fd03 	bl	80017ce <HAL_NVIC_EnableIRQ>

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40022000 	.word	0x40022000

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int T_2=1000; // T_2 est la demi-période de clignotement
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f000 fb9f 	bl	8001526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f80e 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f7ff ff88 	bl	8000d00 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000df0:	f000 fa4c 	bl	800128c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000df4:	f000 fabc 	bl	8001370 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <main+0x2c>)
 8000dfa:	f002 f825 	bl	8002e48 <HAL_TIM_Base_Start_IT>
	  //HAL_UART_Receive(&huart1,&buffer, 1, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart1, buffer, 1, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart1, "\n", 1, HAL_MAX_DELAY);
	  //HAL_UART_Transmit(&huart1, "\r", 1, HAL_MAX_DELAY);
	  //printf("%d\n\r",buffer);
	  shell();
 8000dfe:	f000 f8f7 	bl	8000ff0 <shell>
 8000e02:	e7fc      	b.n	8000dfe <main+0x26>
 8000e04:	200000ec 	.word	0x200000ec

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2230      	movs	r2, #48	; 0x30
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fa62 	bl	80042e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <SystemClock_Config+0xd4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a24      	ldr	r2, [pc, #144]	; (8000edc <SystemClock_Config+0xd4>)
 8000e4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <SystemClock_Config+0xd4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e64:	2310      	movs	r3, #16
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e70:	2308      	movs	r3, #8
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e74:	23d8      	movs	r3, #216	; 0xd8
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 ff1d 	bl	8001cc4 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e90:	f000 f868 	bl	8000f64 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e94:	f000 fec6 	bl	8001c24 <HAL_PWREx_EnableOverDrive>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e9e:	f000 f861 	bl	8000f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000eba:	f107 030c 	add.w	r3, r7, #12
 8000ebe:	2107      	movs	r1, #7
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 f9a3 	bl	800220c <HAL_RCC_ClockConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ecc:	f000 f84a 	bl	8000f64 <Error_Handler>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3750      	adds	r7, #80	; 0x50
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Bouton_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ef0:	d113      	bne.n	8000f1a <HAL_GPIO_EXTI_Callback+0x3a>
	    {
			TIM2->PSC=freq_tab[i];
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x48>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ef8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000efc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28
			i++;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	4a07      	ldr	r2, [pc, #28]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f0a:	6013      	str	r3, [r2, #0]
			if (i>3)
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	dd02      	ble.n	8000f1a <HAL_GPIO_EXTI_Callback+0x3a>
			{
				i=0;
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
			}
	    	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Toggle The Output (LED) Pin
	    }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200000a8 	.word	0x200000a8
 8000f2c:	20000000 	.word	0x20000000

08000f30 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim2 )
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d107      	bne.n	8000f50 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		if(state==LED_TOGGLE)
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d103      	bne.n	8000f50 <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f4c:	f000 fe37 	bl	8001bbe <HAL_GPIO_TogglePin>
		}
	}
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000ec 	.word	0x200000ec
 8000f5c:	200000ac 	.word	0x200000ac
 8000f60:	40022000 	.word	0x40022000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <Error_Handler+0x8>
	...

08000f70 <reading_uart>:
char state_msg[3];
int led_freq=1;
int RX_buffer_size=0;

int reading_uart(char RX_buffer[50], int *reading)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	char RX_ch_buffer;
	int buffer_size=0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]

	while(*reading)
 8000f7e:	e02a      	b.n	8000fd6 <reading_uart+0x66>
	{

		HAL_UART_Receive(&huart1,&RX_ch_buffer, 1, HAL_MAX_DELAY);
 8000f80:	f107 010b 	add.w	r1, r7, #11
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4817      	ldr	r0, [pc, #92]	; (8000fe8 <reading_uart+0x78>)
 8000f8c:	f002 fcad 	bl	80038ea <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, &RX_ch_buffer, 1, HAL_MAX_DELAY);
 8000f90:	f107 010b 	add.w	r1, r7, #11
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <reading_uart+0x78>)
 8000f9c:	f002 fc12 	bl	80037c4 <HAL_UART_Transmit>
		RX_buffer[buffer_size]=RX_ch_buffer;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	7afa      	ldrb	r2, [r7, #11]
 8000fa8:	701a      	strb	r2, [r3, #0]
		buffer_size++;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3301      	adds	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
		if (RX_ch_buffer==13)
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	2b0d      	cmp	r3, #13
 8000fb4:	d10f      	bne.n	8000fd6 <reading_uart+0x66>
		{
			RX_buffer[buffer_size-1]='\0';
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, "\n\r", 2, HAL_MAX_DELAY);
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	4908      	ldr	r1, [pc, #32]	; (8000fec <reading_uart+0x7c>)
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <reading_uart+0x78>)
 8000fcc:	f002 fbfa 	bl	80037c4 <HAL_UART_Transmit>

			*reading=0;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
	while(*reading)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1d0      	bne.n	8000f80 <reading_uart+0x10>
		}
	}
	return buffer_size;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000138 	.word	0x20000138
 8000fec:	08004424 	.word	0x08004424

08000ff0 <shell>:
void shell(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0

	int i=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
	while(shell_on)
 8000ffa:	e0a2      	b.n	8001142 <shell+0x152>
	{
		HAL_UART_Transmit(&huart1, "STM32--->", 9, HAL_MAX_DELAY);
 8000ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8001000:	2209      	movs	r2, #9
 8001002:	4957      	ldr	r1, [pc, #348]	; (8001160 <shell+0x170>)
 8001004:	4857      	ldr	r0, [pc, #348]	; (8001164 <shell+0x174>)
 8001006:	f002 fbdd 	bl	80037c4 <HAL_UART_Transmit>
		RX_buffer_size=reading_uart(RX_buffer, &reading);
 800100a:	4957      	ldr	r1, [pc, #348]	; (8001168 <shell+0x178>)
 800100c:	4857      	ldr	r0, [pc, #348]	; (800116c <shell+0x17c>)
 800100e:	f7ff ffaf 	bl	8000f70 <reading_uart>
 8001012:	4603      	mov	r3, r0
 8001014:	4a56      	ldr	r2, [pc, #344]	; (8001170 <shell+0x180>)
 8001016:	6013      	str	r3, [r2, #0]
		//HAL_UART_Transmit(&huart1, RX_buffer, RX_buffer_size, HAL_MAX_DELAY);

		if (strcmp(RX_buffer,"LED_ON")==0)
 8001018:	4956      	ldr	r1, [pc, #344]	; (8001174 <shell+0x184>)
 800101a:	4854      	ldr	r0, [pc, #336]	; (800116c <shell+0x17c>)
 800101c:	f7ff f8f4 	bl	8000208 <strcmp>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d116      	bne.n	8001054 <shell+0x64>
		{
			state=LED_ON;
 8001026:	4b54      	ldr	r3, [pc, #336]	; (8001178 <shell+0x188>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==GPIO_PIN_RESET)
 800102c:	2102      	movs	r1, #2
 800102e:	4853      	ldr	r0, [pc, #332]	; (800117c <shell+0x18c>)
 8001030:	f000 fd94 	bl	8001b5c <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d104      	bne.n	8001044 <shell+0x54>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2102      	movs	r1, #2
 800103e:	484f      	ldr	r0, [pc, #316]	; (800117c <shell+0x18c>)
 8001040:	f000 fda4 	bl	8001b8c <HAL_GPIO_WritePin>
			}
			HAL_UART_Transmit(&huart1, "LED turned ON\n\r", 15, HAL_MAX_DELAY);
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	220f      	movs	r2, #15
 800104a:	494d      	ldr	r1, [pc, #308]	; (8001180 <shell+0x190>)
 800104c:	4845      	ldr	r0, [pc, #276]	; (8001164 <shell+0x174>)
 800104e:	f002 fbb9 	bl	80037c4 <HAL_UART_Transmit>
 8001052:	e073      	b.n	800113c <shell+0x14c>
		}
		else if (strcmp(RX_buffer,"LED_OFF")==0)
 8001054:	494b      	ldr	r1, [pc, #300]	; (8001184 <shell+0x194>)
 8001056:	4845      	ldr	r0, [pc, #276]	; (800116c <shell+0x17c>)
 8001058:	f7ff f8d6 	bl	8000208 <strcmp>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d116      	bne.n	8001090 <shell+0xa0>
		{
			state=LED_OFF;
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <shell+0x188>)
 8001064:	2202      	movs	r2, #2
 8001066:	601a      	str	r2, [r3, #0]
			if (HAL_GPIO_ReadPin(LED_GPIO_Port, LED_Pin)==GPIO_PIN_SET)
 8001068:	2102      	movs	r1, #2
 800106a:	4844      	ldr	r0, [pc, #272]	; (800117c <shell+0x18c>)
 800106c:	f000 fd76 	bl	8001b5c <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d104      	bne.n	8001080 <shell+0x90>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2102      	movs	r1, #2
 800107a:	4840      	ldr	r0, [pc, #256]	; (800117c <shell+0x18c>)
 800107c:	f000 fd86 	bl	8001b8c <HAL_GPIO_WritePin>
			}
			HAL_UART_Transmit(&huart1, "LED turned OFF\n\r", 16, HAL_MAX_DELAY);
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	2210      	movs	r2, #16
 8001086:	4940      	ldr	r1, [pc, #256]	; (8001188 <shell+0x198>)
 8001088:	4836      	ldr	r0, [pc, #216]	; (8001164 <shell+0x174>)
 800108a:	f002 fb9b 	bl	80037c4 <HAL_UART_Transmit>
 800108e:	e055      	b.n	800113c <shell+0x14c>
		}

		else if (strcmp(RX_buffer,"LED_TOGGLE")==0)
 8001090:	493e      	ldr	r1, [pc, #248]	; (800118c <shell+0x19c>)
 8001092:	4836      	ldr	r0, [pc, #216]	; (800116c <shell+0x17c>)
 8001094:	f7ff f8b8 	bl	8000208 <strcmp>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d144      	bne.n	8001128 <shell+0x138>
		{
			state=LED_TOGGLE;
 800109e:	4b36      	ldr	r3, [pc, #216]	; (8001178 <shell+0x188>)
 80010a0:	2203      	movs	r2, #3
 80010a2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, "Choose a frequency between 1Hz and 5000Hz: ", 43, HAL_MAX_DELAY);
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	222b      	movs	r2, #43	; 0x2b
 80010aa:	4939      	ldr	r1, [pc, #228]	; (8001190 <shell+0x1a0>)
 80010ac:	482d      	ldr	r0, [pc, #180]	; (8001164 <shell+0x174>)
 80010ae:	f002 fb89 	bl	80037c4 <HAL_UART_Transmit>
			reading=1;
 80010b2:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <shell+0x178>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
			RX_buffer_size=reading_uart(RX_buffer, &reading);
 80010b8:	492b      	ldr	r1, [pc, #172]	; (8001168 <shell+0x178>)
 80010ba:	482c      	ldr	r0, [pc, #176]	; (800116c <shell+0x17c>)
 80010bc:	f7ff ff58 	bl	8000f70 <reading_uart>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a2b      	ldr	r2, [pc, #172]	; (8001170 <shell+0x180>)
 80010c4:	6013      	str	r3, [r2, #0]
			led_freq=atoi(RX_buffer);
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <shell+0x17c>)
 80010c8:	f003 f8db 	bl	8004282 <atoi>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a31      	ldr	r2, [pc, #196]	; (8001194 <shell+0x1a4>)
 80010d0:	6013      	str	r3, [r2, #0]
			TIM2->PSC=(int)(108000000.0/(10800*led_freq)-1);
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <shell+0x1a4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f642 2230 	movw	r2, #10800	; 0x2a30
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f9ee 	bl	80004c0 <__aeabi_i2d>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	a11b      	add	r1, pc, #108	; (adr r1, 8001158 <shell+0x168>)
 80010ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010ee:	f7ff fb7b 	bl	80007e8 <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <shell+0x1a8>)
 8001100:	f7ff f890 	bl	8000224 <__aeabi_dsub>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fc54 	bl	80009b8 <__aeabi_d2iz>
 8001110:	4602      	mov	r2, r0
 8001112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_UART_Transmit(&huart1, "LED toggling\n\r", 14, HAL_MAX_DELAY);
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	220e      	movs	r2, #14
 800111e:	491f      	ldr	r1, [pc, #124]	; (800119c <shell+0x1ac>)
 8001120:	4810      	ldr	r0, [pc, #64]	; (8001164 <shell+0x174>)
 8001122:	f002 fb4f 	bl	80037c4 <HAL_UART_Transmit>
 8001126:	e009      	b.n	800113c <shell+0x14c>



		}
		else if (strcmp(RX_buffer,"LED_FREQ")==0)
 8001128:	491d      	ldr	r1, [pc, #116]	; (80011a0 <shell+0x1b0>)
 800112a:	4810      	ldr	r0, [pc, #64]	; (800116c <shell+0x17c>)
 800112c:	f7ff f86c 	bl	8000208 <strcmp>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <shell+0x14c>
		{
			state=LED_TOGGLE;
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <shell+0x188>)
 8001138:	2203      	movs	r2, #3
 800113a:	601a      	str	r2, [r3, #0]
		}
		//sprintf(state_msg,"%d\n\r",strcmp(RX_buffer,"LED_ON"));
		//HAL_UART_Transmit(&huart1, RX_buffer, buffer_size, HAL_MAX_DELAY);
		//HAL_UART_Transmit(&huart1, state_msg, 5, HAL_MAX_DELAY);
		reading=1;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <shell+0x178>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
	while(shell_on)
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <shell+0x1b4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f47f af58 	bne.w	8000ffc <shell+0xc>

	}
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	00000000 	.word	0x00000000
 800115c:	4199bfcc 	.word	0x4199bfcc
 8001160:	08004428 	.word	0x08004428
 8001164:	20000138 	.word	0x20000138
 8001168:	20000014 	.word	0x20000014
 800116c:	200000b4 	.word	0x200000b4
 8001170:	200000b0 	.word	0x200000b0
 8001174:	08004434 	.word	0x08004434
 8001178:	200000ac 	.word	0x200000ac
 800117c:	40022000 	.word	0x40022000
 8001180:	0800443c 	.word	0x0800443c
 8001184:	0800444c 	.word	0x0800444c
 8001188:	08004454 	.word	0x08004454
 800118c:	08004468 	.word	0x08004468
 8001190:	08004474 	.word	0x08004474
 8001194:	20000018 	.word	0x20000018
 8001198:	3ff00000 	.word	0x3ff00000
 800119c:	080044a0 	.word	0x080044a0
 80011a0:	080044b0 	.word	0x080044b0
 80011a4:	20000010 	.word	0x20000010

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_MspInit+0x44>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <HAL_MspInit+0x44>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <HAL_MspInit+0x44>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x44>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x44>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x44>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f000 f9b0 	bl	80015a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM2_IRQHandler+0x10>)
 800124a:	f001 fe75 	bl	8002f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200000ec 	.word	0x200000ec

08001258 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton_Pin);
 800125c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001260:	f000 fcc8 	bl	8001bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_TIM2_Init+0x98>)
 80012b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80012b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_TIM2_Init+0x98>)
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10799;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <MX_TIM2_Init+0x98>)
 80012c2:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80012c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c8:	4b16      	ldr	r3, [pc, #88]	; (8001324 <MX_TIM2_Init+0x98>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <MX_TIM2_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <MX_TIM2_Init+0x98>)
 80012d6:	f001 fd5f 	bl	8002d98 <HAL_TIM_Base_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012e0:	f7ff fe40 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4619      	mov	r1, r3
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_TIM2_Init+0x98>)
 80012f2:	f001 ff41 	bl	8003178 <HAL_TIM_ConfigClockSource>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80012fc:	f7ff fe32 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_TIM2_Init+0x98>)
 800130e:	f002 f95f 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001318:	f7ff fe24 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200000ec 	.word	0x200000ec

08001328 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001338:	d113      	bne.n	8001362 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_TIM_Base_MspInit+0x44>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_TIM_Base_MspInit+0x44>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_TIM_Base_MspInit+0x44>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	201c      	movs	r0, #28
 8001358:	f000 fa1d 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800135c:	201c      	movs	r0, #28
 800135e:	f000 fa36 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <MX_USART1_UART_Init+0x5c>)
 8001378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART1_UART_Init+0x58>)
 80013b4:	f002 f9b8 	bl	8003728 <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013be:	f7ff fdd1 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000138 	.word	0x20000138
 80013cc:	40011000 	.word	0x40011000

080013d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0ac      	sub	sp, #176	; 0xb0
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	2284      	movs	r2, #132	; 0x84
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 ff75 	bl	80042e0 <memset>
  if(uartHandle->Instance==USART1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_UART_MspInit+0xf4>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d15c      	bne.n	80014ba <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001400:	2340      	movs	r3, #64	; 0x40
 8001402:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001404:	2300      	movs	r3, #0
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001408:	f107 0318 	add.w	r3, r7, #24
 800140c:	4618      	mov	r0, r3
 800140e:	f001 f8d3 	bl	80025b8 <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001418:	f7ff fda4 	bl	8000f64 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800141c:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	6453      	str	r3, [r2, #68]	; 0x44
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a23      	ldr	r2, [pc, #140]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_UART_MspInit+0xf8>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800147c:	2307      	movs	r3, #7
 800147e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001486:	4619      	mov	r1, r3
 8001488:	4810      	ldr	r0, [pc, #64]	; (80014cc <HAL_UART_MspInit+0xfc>)
 800148a:	f000 f9bb 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800148e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001492:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a8:	2307      	movs	r3, #7
 80014aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014b2:	4619      	mov	r1, r3
 80014b4:	4806      	ldr	r0, [pc, #24]	; (80014d0 <HAL_UART_MspInit+0x100>)
 80014b6:	f000 f9a5 	bl	8001804 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014ba:	bf00      	nop
 80014bc:	37b0      	adds	r7, #176	; 0xb0
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020000 	.word	0x40020000

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014fe:	f7ff feb3 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 fec9 	bl	8004298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fc67 	bl	8000dd8 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001518:	080045e8 	.word	0x080045e8
  ldr r2, =_sbss
 800151c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001520:	200001c0 	.word	0x200001c0

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>

08001526 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152a:	2003      	movs	r0, #3
 800152c:	f000 f928 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001530:	2000      	movs	r0, #0
 8001532:	f000 f805 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001536:	f7ff fe37 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x54>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x58>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f943 	bl	80017ea <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00e      	b.n	800158c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d80a      	bhi.n	800158a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f000 f90b 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <HAL_InitTick+0x5c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000001c 	.word	0x2000001c
 8001598:	20000024 	.word	0x20000024
 800159c:	20000020 	.word	0x20000020

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000024 	.word	0x20000024
 80015c4:	200001bc 	.word	0x200001bc

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200001bc 	.word	0x200001bc

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	4313      	orrs	r3, r2
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x40>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	05fa0000 	.word	0x05fa0000

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff3e 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff8e 	bl	80016d4 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5d 	bl	8001680 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff31 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e175      	b.n	8001b10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8164 	bne.w	8001b0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_GPIO_Init+0x56>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80be 	beq.w	8001b0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_GPIO_Init+0x324>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a65      	ldr	r2, [pc, #404]	; (8001b28 <HAL_GPIO_Init+0x324>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_GPIO_Init+0x324>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019a6:	4a61      	ldr	r2, [pc, #388]	; (8001b2c <HAL_GPIO_Init+0x328>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_GPIO_Init+0x32c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d037      	beq.n	8001a42 <HAL_GPIO_Init+0x23e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a57      	ldr	r2, [pc, #348]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <HAL_GPIO_Init+0x23a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a56      	ldr	r2, [pc, #344]	; (8001b38 <HAL_GPIO_Init+0x334>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d02b      	beq.n	8001a3a <HAL_GPIO_Init+0x236>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a55      	ldr	r2, [pc, #340]	; (8001b3c <HAL_GPIO_Init+0x338>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d025      	beq.n	8001a36 <HAL_GPIO_Init+0x232>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a54      	ldr	r2, [pc, #336]	; (8001b40 <HAL_GPIO_Init+0x33c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01f      	beq.n	8001a32 <HAL_GPIO_Init+0x22e>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a53      	ldr	r2, [pc, #332]	; (8001b44 <HAL_GPIO_Init+0x340>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d019      	beq.n	8001a2e <HAL_GPIO_Init+0x22a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HAL_GPIO_Init+0x344>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0x226>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <HAL_GPIO_Init+0x348>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00d      	beq.n	8001a26 <HAL_GPIO_Init+0x222>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_GPIO_Init+0x34c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d007      	beq.n	8001a22 <HAL_GPIO_Init+0x21e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4f      	ldr	r2, [pc, #316]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_GPIO_Init+0x21a>
 8001a1a:	2309      	movs	r3, #9
 8001a1c:	e012      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a1e:	230a      	movs	r3, #10
 8001a20:	e010      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a22:	2308      	movs	r3, #8
 8001a24:	e00e      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00c      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e00a      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a2e:	2305      	movs	r3, #5
 8001a30:	e008      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a32:	2304      	movs	r3, #4
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a36:	2303      	movs	r3, #3
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x240>
 8001a42:	2300      	movs	r3, #0
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	f002 0203 	and.w	r2, r2, #3
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a54:	4935      	ldr	r1, [pc, #212]	; (8001b2c <HAL_GPIO_Init+0x328>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b3d      	ldr	r3, [pc, #244]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a86:	4a34      	ldr	r2, [pc, #208]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab0:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ada:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4013      	ands	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <HAL_GPIO_Init+0x354>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	f67f ae86 	bls.w	8001824 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40021c00 	.word	0x40021c00
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40022400 	.word	0x40022400
 8001b58:	40013c00 	.word	0x40013c00

08001b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b9c:	787b      	ldrb	r3, [r7, #1]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba2:	887a      	ldrh	r2, [r7, #2]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ba8:	e003      	b.n	8001bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	041a      	lsls	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	619a      	str	r2, [r3, #24]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd0:	887a      	ldrh	r2, [r7, #2]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	041a      	lsls	r2, r3, #16
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	400b      	ands	r3, r1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d006      	beq.n	8001c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f964 	bl	8000ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40013c00 	.word	0x40013c00

08001c24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a22      	ldr	r2, [pc, #136]	; (8001cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_PWREx_EnableOverDrive+0x98>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c52:	f7ff fcb9 	bl	80015c8 <HAL_GetTick>
 8001c56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c58:	e009      	b.n	8001c6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c5a:	f7ff fcb5 	bl	80015c8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c68:	d901      	bls.n	8001c6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e022      	b.n	8001cb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c6e:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d1ee      	bne.n	8001c5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c88:	f7ff fc9e 	bl	80015c8 <HAL_GetTick>
 8001c8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c8e:	e009      	b.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c90:	f7ff fc9a 	bl	80015c8 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c9e:	d901      	bls.n	8001ca4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e007      	b.n	8001cb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cb0:	d1ee      	bne.n	8001c90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40007000 	.word	0x40007000

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e291      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8087 	beq.w	8001df6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	4b96      	ldr	r3, [pc, #600]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 030c 	and.w	r3, r3, #12
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d00c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf4:	4b93      	ldr	r3, [pc, #588]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d112      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62>
 8001d00:	4b90      	ldr	r3, [pc, #576]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0e:	4b8d      	ldr	r3, [pc, #564]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d06c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x130>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d168      	bne.n	8001df4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e26b      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x7a>
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a83      	ldr	r2, [pc, #524]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e02e      	b.n	8001d9c <HAL_RCC_OscConfig+0xd8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x9c>
 8001d46:	4b7f      	ldr	r3, [pc, #508]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a7e      	ldr	r2, [pc, #504]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b7c      	ldr	r3, [pc, #496]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7b      	ldr	r2, [pc, #492]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e01d      	b.n	8001d9c <HAL_RCC_OscConfig+0xd8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0xc0>
 8001d6a:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a75      	ldr	r2, [pc, #468]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a72      	ldr	r2, [pc, #456]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e00b      	b.n	8001d9c <HAL_RCC_OscConfig+0xd8>
 8001d84:	4b6f      	ldr	r3, [pc, #444]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a6e      	ldr	r2, [pc, #440]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a6b      	ldr	r2, [pc, #428]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff fc10 	bl	80015c8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fc0c 	bl	80015c8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e21f      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dbe:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0xe8>
 8001dca:	e014      	b.n	8001df6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7ff fbfc 	bl	80015c8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff fbf8 	bl	80015c8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e20b      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x110>
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d069      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e02:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00b      	beq.n	8001e26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d11c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x190>
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d116      	bne.n	8001e54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_RCC_OscConfig+0x17a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e1df      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	493d      	ldr	r1, [pc, #244]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e52:	e040      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d023      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5c:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a38      	ldr	r2, [pc, #224]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7ff fbae 	bl	80015c8 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e70:	f7ff fbaa 	bl	80015c8 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e1bd      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4929      	ldr	r1, [pc, #164]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
 8001ea2:	e018      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	f023 0301 	bic.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fb8a 	bl	80015c8 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fb86 	bl	80015c8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e199      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d038      	beq.n	8001f54 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d019      	beq.n	8001f1e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eee:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fb67 	bl	80015c8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efe:	f7ff fb63 	bl	80015c8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e176      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x23a>
 8001f1c:	e01a      	b.n	8001f54 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_RCC_OscConfig+0x280>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fb4d 	bl	80015c8 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f32:	f7ff fb49 	bl	80015c8 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d903      	bls.n	8001f48 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e15c      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
 8001f44:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	4b91      	ldr	r3, [pc, #580]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ee      	bne.n	8001f32 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a4 	beq.w	80020aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b8b      	ldr	r3, [pc, #556]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10d      	bne.n	8001f8a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	4b88      	ldr	r3, [pc, #544]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a87      	ldr	r2, [pc, #540]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b85      	ldr	r3, [pc, #532]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f86:	2301      	movs	r3, #1
 8001f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8a:	4b82      	ldr	r3, [pc, #520]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d118      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f96:	4b7f      	ldr	r3, [pc, #508]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7e      	ldr	r2, [pc, #504]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fb11 	bl	80015c8 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7ff fb0d 	bl	80015c8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e120      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbc:	4b75      	ldr	r3, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x4d0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x31a>
 8001fd0:	4b6f      	ldr	r3, [pc, #444]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4a6e      	ldr	r2, [pc, #440]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	; 0x70
 8001fdc:	e02d      	b.n	800203a <HAL_RCC_OscConfig+0x376>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x33c>
 8001fe6:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fea:	4a69      	ldr	r2, [pc, #420]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a66      	ldr	r2, [pc, #408]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e01c      	b.n	800203a <HAL_RCC_OscConfig+0x376>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x35e>
 8002008:	4b61      	ldr	r3, [pc, #388]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a60      	ldr	r2, [pc, #384]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
 8002014:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a5d      	ldr	r2, [pc, #372]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x376>
 8002022:	4b5b      	ldr	r3, [pc, #364]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	4b58      	ldr	r3, [pc, #352]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a57      	ldr	r2, [pc, #348]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7ff fac1 	bl	80015c8 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff fabd 	bl	80015c8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0ce      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4b4b      	ldr	r3, [pc, #300]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RCC_OscConfig+0x386>
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7ff faab 	bl	80015c8 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff faa7 	bl	80015c8 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0b8      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	4b40      	ldr	r3, [pc, #256]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b3c      	ldr	r3, [pc, #240]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80a4 	beq.w	80021fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b4:	4b36      	ldr	r3, [pc, #216]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d06b      	beq.n	8002198 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d149      	bne.n	800215c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b31      	ldr	r3, [pc, #196]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a30      	ldr	r2, [pc, #192]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d4:	f7ff fa78 	bl	80015c8 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff fa74 	bl	80015c8 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e087      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69da      	ldr	r2, [r3, #28]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	3b01      	subs	r3, #1
 8002114:	041b      	lsls	r3, r3, #16
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	4313      	orrs	r3, r2
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002126:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7ff fa48 	bl	80015c8 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff fa44 	bl	80015c8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e057      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x478>
 800215a:	e04f      	b.n	80021fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff fa2e 	bl	80015c8 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff fa2a 	bl	80015c8 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e03d      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_RCC_OscConfig+0x4cc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x4ac>
 800218e:	e035      	b.n	80021fc <HAL_RCC_OscConfig+0x538>
 8002190:	40023800 	.word	0x40023800
 8002194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x544>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d028      	beq.n	80021f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d121      	bne.n	80021f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d11a      	bne.n	80021f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021c8:	4013      	ands	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d111      	bne.n	80021f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	085b      	lsrs	r3, r3, #1
 80021e0:	3b01      	subs	r3, #1
 80021e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0d0      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d910      	bls.n	8002254 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 020f 	bic.w	r2, r3, #15
 800223a:	4965      	ldr	r1, [pc, #404]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0b8      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d020      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800226c:	4b59      	ldr	r3, [pc, #356]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a58      	ldr	r2, [pc, #352]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002276:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002284:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4a52      	ldr	r2, [pc, #328]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 800228a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800228e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b50      	ldr	r3, [pc, #320]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	494d      	ldr	r1, [pc, #308]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d040      	beq.n	8002330 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d115      	bne.n	80022ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e07f      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d107      	bne.n	80022de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ce:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e073      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06b      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ee:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f023 0203 	bic.w	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4936      	ldr	r1, [pc, #216]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002300:	f7ff f962 	bl	80015c8 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7ff f95e 	bl	80015c8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	; 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e053      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 020c 	and.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	429a      	cmp	r2, r3
 800232e:	d1eb      	bne.n	8002308 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002330:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d210      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233e:	4b24      	ldr	r3, [pc, #144]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 020f 	bic.w	r2, r3, #15
 8002346:	4922      	ldr	r1, [pc, #136]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d001      	beq.n	8002360 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e032      	b.n	80023c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4916      	ldr	r1, [pc, #88]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d009      	beq.n	800239e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	490e      	ldr	r1, [pc, #56]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800239e:	f000 f821 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 80023a2:	4602      	mov	r2, r0
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	490a      	ldr	r1, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x1cc>)
 80023b0:	5ccb      	ldrb	r3, [r1, r3]
 80023b2:	fa22 f303 	lsr.w	r3, r2, r3
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RCC_ClockConfig+0x1d0>)
 80023b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_ClockConfig+0x1d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f8be 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00
 80023d4:	40023800 	.word	0x40023800
 80023d8:	080044bc 	.word	0x080044bc
 80023dc:	2000001c 	.word	0x2000001c
 80023e0:	20000020 	.word	0x20000020

080023e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023ea:	2100      	movs	r1, #0
 80023ec:	6079      	str	r1, [r7, #4]
 80023ee:	2100      	movs	r1, #0
 80023f0:	60f9      	str	r1, [r7, #12]
 80023f2:	2100      	movs	r1, #0
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80023f6:	2100      	movs	r1, #0
 80023f8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023fa:	4952      	ldr	r1, [pc, #328]	; (8002544 <HAL_RCC_GetSysClockFreq+0x160>)
 80023fc:	6889      	ldr	r1, [r1, #8]
 80023fe:	f001 010c 	and.w	r1, r1, #12
 8002402:	2908      	cmp	r1, #8
 8002404:	d00d      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x3e>
 8002406:	2908      	cmp	r1, #8
 8002408:	f200 8094 	bhi.w	8002534 <HAL_RCC_GetSysClockFreq+0x150>
 800240c:	2900      	cmp	r1, #0
 800240e:	d002      	beq.n	8002416 <HAL_RCC_GetSysClockFreq+0x32>
 8002410:	2904      	cmp	r1, #4
 8002412:	d003      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0x38>
 8002414:	e08e      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002416:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <HAL_RCC_GetSysClockFreq+0x164>)
 8002418:	60bb      	str	r3, [r7, #8]
      break;
 800241a:	e08e      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800241c:	4b4b      	ldr	r3, [pc, #300]	; (800254c <HAL_RCC_GetSysClockFreq+0x168>)
 800241e:	60bb      	str	r3, [r7, #8]
      break;
 8002420:	e08b      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002422:	4948      	ldr	r1, [pc, #288]	; (8002544 <HAL_RCC_GetSysClockFreq+0x160>)
 8002424:	6849      	ldr	r1, [r1, #4]
 8002426:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800242a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800242c:	4945      	ldr	r1, [pc, #276]	; (8002544 <HAL_RCC_GetSysClockFreq+0x160>)
 800242e:	6849      	ldr	r1, [r1, #4]
 8002430:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002434:	2900      	cmp	r1, #0
 8002436:	d024      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002438:	4942      	ldr	r1, [pc, #264]	; (8002544 <HAL_RCC_GetSysClockFreq+0x160>)
 800243a:	6849      	ldr	r1, [r1, #4]
 800243c:	0989      	lsrs	r1, r1, #6
 800243e:	4608      	mov	r0, r1
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002448:	f04f 0500 	mov.w	r5, #0
 800244c:	ea00 0204 	and.w	r2, r0, r4
 8002450:	ea01 0305 	and.w	r3, r1, r5
 8002454:	493d      	ldr	r1, [pc, #244]	; (800254c <HAL_RCC_GetSysClockFreq+0x168>)
 8002456:	fb01 f003 	mul.w	r0, r1, r3
 800245a:	2100      	movs	r1, #0
 800245c:	fb01 f102 	mul.w	r1, r1, r2
 8002460:	1844      	adds	r4, r0, r1
 8002462:	493a      	ldr	r1, [pc, #232]	; (800254c <HAL_RCC_GetSysClockFreq+0x168>)
 8002464:	fba2 0101 	umull	r0, r1, r2, r1
 8002468:	1863      	adds	r3, r4, r1
 800246a:	4619      	mov	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	461a      	mov	r2, r3
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	f7fe fac8 	bl	8000a08 <__aeabi_uldivmod>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4613      	mov	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e04a      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_GetSysClockFreq+0x160>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	461a      	mov	r2, r3
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	ea02 0400 	and.w	r4, r2, r0
 800249a:	ea03 0501 	and.w	r5, r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	014b      	lsls	r3, r1, #5
 80024ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024b0:	0142      	lsls	r2, r0, #5
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	1b00      	subs	r0, r0, r4
 80024b8:	eb61 0105 	sbc.w	r1, r1, r5
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	018b      	lsls	r3, r1, #6
 80024c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024ca:	0182      	lsls	r2, r0, #6
 80024cc:	1a12      	subs	r2, r2, r0
 80024ce:	eb63 0301 	sbc.w	r3, r3, r1
 80024d2:	f04f 0000 	mov.w	r0, #0
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	00d9      	lsls	r1, r3, #3
 80024dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024e0:	00d0      	lsls	r0, r2, #3
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	1912      	adds	r2, r2, r4
 80024e8:	eb45 0303 	adc.w	r3, r5, r3
 80024ec:	f04f 0000 	mov.w	r0, #0
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	0299      	lsls	r1, r3, #10
 80024f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024fa:	0290      	lsls	r0, r2, #10
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	461a      	mov	r2, r3
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	f7fe fa7c 	bl	8000a08 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_RCC_GetSysClockFreq+0x160>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	3301      	adds	r3, #1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	60bb      	str	r3, [r7, #8]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <HAL_RCC_GetSysClockFreq+0x164>)
 8002536:	60bb      	str	r3, [r7, #8]
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	68bb      	ldr	r3, [r7, #8]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bdb0      	pop	{r4, r5, r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	017d7840 	.word	0x017d7840

08002550 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCC_GetHCLKFreq+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	2000001c 	.word	0x2000001c

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800256c:	f7ff fff0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b05      	ldr	r3, [pc, #20]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0a9b      	lsrs	r3, r3, #10
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4903      	ldr	r1, [pc, #12]	; (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	080044cc 	.word	0x080044cc

08002590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002594:	f7ff ffdc 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002598:	4602      	mov	r2, r0
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	0b5b      	lsrs	r3, r3, #13
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	4903      	ldr	r1, [pc, #12]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a6:	5ccb      	ldrb	r3, [r1, r3]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	080044cc 	.word	0x080044cc

080025b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025e0:	4b69      	ldr	r3, [pc, #420]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a68      	ldr	r2, [pc, #416]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025ea:	6093      	str	r3, [r2, #8]
 80025ec:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f4:	4964      	ldr	r1, [pc, #400]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d017      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002612:	4b5d      	ldr	r3, [pc, #372]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002618:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	4959      	ldr	r1, [pc, #356]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002630:	d101      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d017      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800264e:	4b4e      	ldr	r3, [pc, #312]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002654:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	494a      	ldr	r1, [pc, #296]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266c:	d101      	bne.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 808b 	beq.w	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800269c:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	4a39      	ldr	r2, [pc, #228]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6413      	str	r3, [r2, #64]	; 0x40
 80026a8:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a34      	ldr	r2, [pc, #208]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe ff82 	bl	80015c8 <HAL_GetTick>
 80026c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c8:	f7fe ff7e 	bl	80015c8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e357      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026da:	4b2c      	ldr	r3, [pc, #176]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026e6:	4b28      	ldr	r3, [pc, #160]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d035      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	429a      	cmp	r2, r3
 8002702:	d02e      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002724:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002726:	4a18      	ldr	r2, [pc, #96]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800272c:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d114      	bne.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe ff46 	bl	80015c8 <HAL_GetTick>
 800273c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	e00a      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe ff42 	bl	80015c8 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e319      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ee      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800276a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800276e:	d111      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800277e:	400b      	ands	r3, r1
 8002780:	4901      	ldr	r1, [pc, #4]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
 8002786:	e00b      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000
 8002790:	0ffffcff 	.word	0x0ffffcff
 8002794:	4bb1      	ldr	r3, [pc, #708]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4ab0      	ldr	r2, [pc, #704]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800279a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800279e:	6093      	str	r3, [r2, #8]
 80027a0:	4bae      	ldr	r3, [pc, #696]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	49ab      	ldr	r1, [pc, #684]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d010      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027be:	4ba7      	ldr	r3, [pc, #668]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c4:	4aa5      	ldr	r2, [pc, #660]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027ce:	4ba3      	ldr	r3, [pc, #652]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	49a0      	ldr	r1, [pc, #640]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ec:	4b9b      	ldr	r3, [pc, #620]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027fa:	4998      	ldr	r1, [pc, #608]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800280e:	4b93      	ldr	r3, [pc, #588]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281c:	498f      	ldr	r1, [pc, #572]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002830:	4b8a      	ldr	r3, [pc, #552]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283e:	4987      	ldr	r1, [pc, #540]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002852:	4b82      	ldr	r3, [pc, #520]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	497e      	ldr	r1, [pc, #504]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002874:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f023 0203 	bic.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4976      	ldr	r1, [pc, #472]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002896:	4b71      	ldr	r3, [pc, #452]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	f023 020c 	bic.w	r2, r3, #12
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	496d      	ldr	r1, [pc, #436]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028b8:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	4965      	ldr	r1, [pc, #404]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028da:	4b60      	ldr	r3, [pc, #384]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e8:	495c      	ldr	r1, [pc, #368]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028fc:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	4954      	ldr	r1, [pc, #336]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800291e:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002924:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	494b      	ldr	r1, [pc, #300]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002940:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002946:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	4943      	ldr	r1, [pc, #268]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002962:	4b3e      	ldr	r3, [pc, #248]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002970:	493a      	ldr	r1, [pc, #232]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002992:	4932      	ldr	r1, [pc, #200]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d011      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029a6:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b4:	4929      	ldr	r1, [pc, #164]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c4:	d101      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	4919      	ldr	r1, [pc, #100]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a18:	4910      	ldr	r1, [pc, #64]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d006      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80d9 	beq.w	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a40:	f7fe fdc2 	bl	80015c8 <HAL_GetTick>
 8002a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a46:	e00b      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a48:	f7fe fdbe 	bl	80015c8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b64      	cmp	r3, #100	; 0x64
 8002a54:	d904      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e197      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a60:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ed      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d021      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11d      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a80:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a8e:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a94:	0e1b      	lsrs	r3, r3, #24
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	019a      	lsls	r2, r3, #6
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	041b      	lsls	r3, r3, #16
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	071b      	lsls	r3, r3, #28
 8002ab4:	4957      	ldr	r1, [pc, #348]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d02e      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae6:	d129      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afc:	0f1b      	lsrs	r3, r3, #28
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	019a      	lsls	r2, r3, #6
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	061b      	lsls	r3, r3, #24
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	071b      	lsls	r3, r3, #28
 8002b1c:	493d      	ldr	r1, [pc, #244]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b24:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b2a:	f023 021f 	bic.w	r2, r3, #31
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	3b01      	subs	r3, #1
 8002b34:	4937      	ldr	r1, [pc, #220]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01d      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b48:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4e:	0e1b      	lsrs	r3, r3, #24
 8002b50:	f003 030f 	and.w	r3, r3, #15
 8002b54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b56:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5c:	0f1b      	lsrs	r3, r3, #28
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	019a      	lsls	r2, r3, #6
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	431a      	orrs	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	071b      	lsls	r3, r3, #28
 8002b7c:	4925      	ldr	r1, [pc, #148]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d011      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	019a      	lsls	r2, r3, #6
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	041b      	lsls	r3, r3, #16
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	061b      	lsls	r3, r3, #24
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	071b      	lsls	r3, r3, #28
 8002bac:	4919      	ldr	r1, [pc, #100]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a16      	ldr	r2, [pc, #88]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fd02 	bl	80015c8 <HAL_GetTick>
 8002bc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bc8:	f7fe fcfe 	bl	80015c8 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e0d7      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	f040 80cd 	bne.w	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bee:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfa:	f7fe fce5 	bl	80015c8 <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c02:	f7fe fce1 	bl	80015c8 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d903      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0ba      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002c14:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c18:	4b5e      	ldr	r3, [pc, #376]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c24:	d0ed      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d02e      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d12a      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c4e:	4b51      	ldr	r3, [pc, #324]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	0f1b      	lsrs	r3, r3, #28
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	019a      	lsls	r2, r3, #6
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	071b      	lsls	r3, r3, #28
 8002c82:	4944      	ldr	r1, [pc, #272]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c8a:	4b42      	ldr	r3, [pc, #264]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c90:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	493d      	ldr	r1, [pc, #244]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d022      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb8:	d11d      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cba:	4b36      	ldr	r3, [pc, #216]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	0e1b      	lsrs	r3, r3, #24
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cc8:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	0f1b      	lsrs	r3, r3, #28
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	019a      	lsls	r2, r3, #6
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	061b      	lsls	r3, r3, #24
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	071b      	lsls	r3, r3, #28
 8002cee:	4929      	ldr	r1, [pc, #164]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d028      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d02:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d08:	0e1b      	lsrs	r3, r3, #24
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d10:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	019a      	lsls	r2, r3, #6
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	041b      	lsls	r3, r3, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	071b      	lsls	r3, r3, #28
 8002d36:	4917      	ldr	r1, [pc, #92]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d3e:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	4911      	ldr	r1, [pc, #68]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d60:	f7fe fc32 	bl	80015c8 <HAL_GetTick>
 8002d64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d68:	f7fe fc2e 	bl	80015c8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	; 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e007      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d86:	d1ef      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800

08002d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e049      	b.n	8002e3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fab2 	bl	8001328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f000 fac0 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d001      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e054      	b.n	8002f0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d022      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8a:	d01d      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d018      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a21      	ldr	r2, [pc, #132]	; (8002f20 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d013      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00e      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1e      	ldr	r2, [pc, #120]	; (8002f28 <HAL_TIM_Base_Start_IT+0xe0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <HAL_TIM_Base_Start_IT+0xe4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x80>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	; (8002f30 <HAL_TIM_Base_Start_IT+0xe8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d115      	bne.n	8002ef4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_TIM_Base_Start_IT+0xec>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d015      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0xbe>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d011      	beq.n	8002f06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef2:	e008      	b.n	8002f06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e000      	b.n	8002f08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40000400 	.word	0x40000400
 8002f20:	40000800 	.word	0x40000800
 8002f24:	40000c00 	.word	0x40000c00
 8002f28:	40010400 	.word	0x40010400
 8002f2c:	40014000 	.word	0x40014000
 8002f30:	40001800 	.word	0x40001800
 8002f34:	00010007 	.word	0x00010007

08002f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d122      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d11b      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0202 	mvn.w	r2, #2
 8002f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9d0 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9c2 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9d3 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0204 	mvn.w	r2, #4
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f9a6 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f998 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f9a9 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	2b08      	cmp	r3, #8
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0208 	mvn.w	r2, #8
 800300c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2204      	movs	r2, #4
 8003012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f97c 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f96e 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f97f 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b10      	cmp	r3, #16
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b10      	cmp	r3, #16
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0210 	mvn.w	r2, #16
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2208      	movs	r2, #8
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f952 	bl	8003320 <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f944 	bl	800330c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f955 	bl	8003334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10e      	bne.n	80030bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0201 	mvn.w	r2, #1
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd ff3a 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d10e      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b80      	cmp	r3, #128	; 0x80
 80030d6:	d107      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fb0c 	bl	8003700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f6:	d10e      	bne.n	8003116 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d107      	bne.n	8003116 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 faff 	bl	8003714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d10e      	bne.n	8003142 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d107      	bne.n	8003142 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800313a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f903 	bl	8003348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b20      	cmp	r3, #32
 800314e:	d10e      	bne.n	800316e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b20      	cmp	r3, #32
 800315c:	d107      	bne.n	800316e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 0220 	mvn.w	r2, #32
 8003166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fabf 	bl	80036ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIM_ConfigClockSource+0x1c>
 8003190:	2302      	movs	r3, #2
 8003192:	e0b4      	b.n	80032fe <HAL_TIM_ConfigClockSource+0x186>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	4b56      	ldr	r3, [pc, #344]	; (8003308 <HAL_TIM_ConfigClockSource+0x190>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031cc:	d03e      	beq.n	800324c <HAL_TIM_ConfigClockSource+0xd4>
 80031ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d2:	f200 8087 	bhi.w	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031da:	f000 8086 	beq.w	80032ea <HAL_TIM_ConfigClockSource+0x172>
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d87f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b70      	cmp	r3, #112	; 0x70
 80031e6:	d01a      	beq.n	800321e <HAL_TIM_ConfigClockSource+0xa6>
 80031e8:	2b70      	cmp	r3, #112	; 0x70
 80031ea:	d87b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b60      	cmp	r3, #96	; 0x60
 80031ee:	d050      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x11a>
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d877      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b50      	cmp	r3, #80	; 0x50
 80031f6:	d03c      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0xfa>
 80031f8:	2b50      	cmp	r3, #80	; 0x50
 80031fa:	d873      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b40      	cmp	r3, #64	; 0x40
 80031fe:	d058      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d86f      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b30      	cmp	r3, #48	; 0x30
 8003206:	d064      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003208:	2b30      	cmp	r3, #48	; 0x30
 800320a:	d86b      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	2b20      	cmp	r3, #32
 800320e:	d060      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003210:	2b20      	cmp	r3, #32
 8003212:	d867      	bhi.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d05c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003218:	2b10      	cmp	r3, #16
 800321a:	d05a      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0x15a>
 800321c:	e062      	b.n	80032e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6899      	ldr	r1, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f000 f9af 	bl	8003590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	609a      	str	r2, [r3, #8]
      break;
 800324a:	e04f      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f000 f998 	bl	8003590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800326e:	609a      	str	r2, [r3, #8]
      break;
 8003270:	e03c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 f90c 	bl	800349c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2150      	movs	r1, #80	; 0x50
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f965 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 8003290:	e02c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 f92b 	bl	80034fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2160      	movs	r1, #96	; 0x60
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f955 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 80032b0:	e01c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6859      	ldr	r1, [r3, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	461a      	mov	r2, r3
 80032c0:	f000 f8ec 	bl	800349c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f945 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 80032d0:	e00c      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f000 f93c 	bl	800355a <TIM_ITRx_SetConfig>
      break;
 80032e2:	e003      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e000      	b.n	80032ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	fffeff88 	.word	0xfffeff88

0800330c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a40      	ldr	r2, [pc, #256]	; (8003470 <TIM_Base_SetConfig+0x114>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a3d      	ldr	r2, [pc, #244]	; (8003474 <TIM_Base_SetConfig+0x118>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3c      	ldr	r2, [pc, #240]	; (8003478 <TIM_Base_SetConfig+0x11c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3b      	ldr	r2, [pc, #236]	; (800347c <TIM_Base_SetConfig+0x120>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <TIM_Base_SetConfig+0x124>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a2f      	ldr	r2, [pc, #188]	; (8003470 <TIM_Base_SetConfig+0x114>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033bc:	d027      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2c      	ldr	r2, [pc, #176]	; (8003474 <TIM_Base_SetConfig+0x118>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d023      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <TIM_Base_SetConfig+0x11c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <TIM_Base_SetConfig+0x120>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a29      	ldr	r2, [pc, #164]	; (8003480 <TIM_Base_SetConfig+0x124>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d017      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a28      	ldr	r2, [pc, #160]	; (8003484 <TIM_Base_SetConfig+0x128>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a27      	ldr	r2, [pc, #156]	; (8003488 <TIM_Base_SetConfig+0x12c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a26      	ldr	r2, [pc, #152]	; (800348c <TIM_Base_SetConfig+0x130>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a25      	ldr	r2, [pc, #148]	; (8003490 <TIM_Base_SetConfig+0x134>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <TIM_Base_SetConfig+0x138>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a23      	ldr	r2, [pc, #140]	; (8003498 <TIM_Base_SetConfig+0x13c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <TIM_Base_SetConfig+0x114>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0xf8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <TIM_Base_SetConfig+0x124>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	615a      	str	r2, [r3, #20]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40010400 	.word	0x40010400
 8003484:	40014000 	.word	0x40014000
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800
 8003490:	40001800 	.word	0x40001800
 8003494:	40001c00 	.word	0x40001c00
 8003498:	40002000 	.word	0x40002000

0800349c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f023 0201 	bic.w	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f023 030a 	bic.w	r3, r3, #10
 80034d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b087      	sub	sp, #28
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f023 0210 	bic.w	r2, r3, #16
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	031b      	lsls	r3, r3, #12
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800355a:	b480      	push	{r7}
 800355c:	b085      	sub	sp, #20
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	f043 0307 	orr.w	r3, r3, #7
 800357c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	021a      	lsls	r2, r3, #8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	431a      	orrs	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e06d      	b.n	80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d108      	bne.n	800362e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003622:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003634:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a20      	ldr	r2, [pc, #128]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d022      	beq.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365a:	d01d      	beq.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d018      	beq.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d013      	beq.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1a      	ldr	r2, [pc, #104]	; (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a15      	ldr	r2, [pc, #84]	; (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d10c      	bne.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40010000 	.word	0x40010000
 80036d4:	40010400 	.word	0x40010400
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40014000 	.word	0x40014000
 80036e8:	40001800 	.word	0x40001800

080036ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e040      	b.n	80037bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fe40 	bl	80013d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f990 	bl	8003a8c <UART_SetConfig>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e022      	b.n	80037bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fbe6 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fc6d 	bl	8004094 <UART_CheckIdleState>
 80037ba:	4603      	mov	r3, r0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d8:	2b20      	cmp	r3, #32
 80037da:	f040 8081 	bne.w	80038e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_UART_Transmit+0x26>
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e079      	b.n	80038e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_UART_Transmit+0x38>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e072      	b.n	80038e2 <HAL_UART_Transmit+0x11e>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2221      	movs	r2, #33	; 0x21
 8003810:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003812:	f7fd fed9 	bl	80015c8 <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003830:	d108      	bne.n	8003844 <HAL_UART_Transmit+0x80>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	e003      	b.n	800384c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003848:	2300      	movs	r3, #0
 800384a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003854:	e02c      	b.n	80038b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fc4a 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e038      	b.n	80038e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3302      	adds	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e007      	b.n	800389e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3301      	adds	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1cc      	bne.n	8003856 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fc17 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e005      	b.n	80038e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b08a      	sub	sp, #40	; 0x28
 80038ee:	af02      	add	r7, sp, #8
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038fe:	2b20      	cmp	r3, #32
 8003900:	f040 80be 	bne.w	8003a80 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_UART_Receive+0x26>
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b6      	b.n	8003a82 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_UART_Receive+0x38>
 800391e:	2302      	movs	r3, #2
 8003920:	e0af      	b.n	8003a82 <HAL_UART_Receive+0x198>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2222      	movs	r2, #34	; 0x22
 8003936:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393e:	f7fd fe43 	bl	80015c8 <HAL_GetTick>
 8003942:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395c:	d10e      	bne.n	800397c <HAL_UART_Receive+0x92>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d105      	bne.n	8003972 <HAL_UART_Receive+0x88>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f240 12ff 	movw	r2, #511	; 0x1ff
 800396c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003970:	e02d      	b.n	80039ce <HAL_UART_Receive+0xe4>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	22ff      	movs	r2, #255	; 0xff
 8003976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800397a:	e028      	b.n	80039ce <HAL_UART_Receive+0xe4>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10d      	bne.n	80039a0 <HAL_UART_Receive+0xb6>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <HAL_UART_Receive+0xac>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	22ff      	movs	r2, #255	; 0xff
 8003990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003994:	e01b      	b.n	80039ce <HAL_UART_Receive+0xe4>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	227f      	movs	r2, #127	; 0x7f
 800399a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800399e:	e016      	b.n	80039ce <HAL_UART_Receive+0xe4>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039a8:	d10d      	bne.n	80039c6 <HAL_UART_Receive+0xdc>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d104      	bne.n	80039bc <HAL_UART_Receive+0xd2>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	227f      	movs	r2, #127	; 0x7f
 80039b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039ba:	e008      	b.n	80039ce <HAL_UART_Receive+0xe4>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	223f      	movs	r2, #63	; 0x3f
 80039c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039c4:	e003      	b.n	80039ce <HAL_UART_Receive+0xe4>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039d4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d108      	bne.n	80039f2 <HAL_UART_Receive+0x108>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e003      	b.n	80039fa <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a02:	e032      	b.n	8003a6a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2120      	movs	r1, #32
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fb73 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e031      	b.n	8003a82 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10c      	bne.n	8003a3e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	8a7b      	ldrh	r3, [r7, #18]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	3302      	adds	r3, #2
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e00c      	b.n	8003a58 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	8a7b      	ldrh	r3, [r7, #18]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1c6      	bne.n	8003a04 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4ba7      	ldr	r3, [pc, #668]	; (8003d54 <UART_SetConfig+0x2c8>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a95      	ldr	r2, [pc, #596]	; (8003d58 <UART_SetConfig+0x2cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d120      	bne.n	8003b4a <UART_SetConfig+0xbe>
 8003b08:	4b94      	ldr	r3, [pc, #592]	; (8003d5c <UART_SetConfig+0x2d0>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d816      	bhi.n	8003b44 <UART_SetConfig+0xb8>
 8003b16:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0x90>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b33 	.word	0x08003b33
 8003b28:	08003b3f 	.word	0x08003b3f
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e14f      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003b32:	2302      	movs	r3, #2
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e14c      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e149      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e146      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003b44:	2310      	movs	r3, #16
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e143      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a84      	ldr	r2, [pc, #528]	; (8003d60 <UART_SetConfig+0x2d4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d132      	bne.n	8003bba <UART_SetConfig+0x12e>
 8003b54:	4b81      	ldr	r3, [pc, #516]	; (8003d5c <UART_SetConfig+0x2d0>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d828      	bhi.n	8003bb4 <UART_SetConfig+0x128>
 8003b62:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <UART_SetConfig+0xdc>)
 8003b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b68:	08003b9d 	.word	0x08003b9d
 8003b6c:	08003bb5 	.word	0x08003bb5
 8003b70:	08003bb5 	.word	0x08003bb5
 8003b74:	08003bb5 	.word	0x08003bb5
 8003b78:	08003ba9 	.word	0x08003ba9
 8003b7c:	08003bb5 	.word	0x08003bb5
 8003b80:	08003bb5 	.word	0x08003bb5
 8003b84:	08003bb5 	.word	0x08003bb5
 8003b88:	08003ba3 	.word	0x08003ba3
 8003b8c:	08003bb5 	.word	0x08003bb5
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bb5 	.word	0x08003bb5
 8003b98:	08003baf 	.word	0x08003baf
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e117      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e114      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e111      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003bae:	2308      	movs	r3, #8
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	e10e      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	77fb      	strb	r3, [r7, #31]
 8003bb8:	e10b      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a69      	ldr	r2, [pc, #420]	; (8003d64 <UART_SetConfig+0x2d8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d120      	bne.n	8003c06 <UART_SetConfig+0x17a>
 8003bc4:	4b65      	ldr	r3, [pc, #404]	; (8003d5c <UART_SetConfig+0x2d0>)
 8003bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bce:	2b30      	cmp	r3, #48	; 0x30
 8003bd0:	d013      	beq.n	8003bfa <UART_SetConfig+0x16e>
 8003bd2:	2b30      	cmp	r3, #48	; 0x30
 8003bd4:	d814      	bhi.n	8003c00 <UART_SetConfig+0x174>
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d009      	beq.n	8003bee <UART_SetConfig+0x162>
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d810      	bhi.n	8003c00 <UART_SetConfig+0x174>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <UART_SetConfig+0x15c>
 8003be2:	2b10      	cmp	r3, #16
 8003be4:	d006      	beq.n	8003bf4 <UART_SetConfig+0x168>
 8003be6:	e00b      	b.n	8003c00 <UART_SetConfig+0x174>
 8003be8:	2300      	movs	r3, #0
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	e0f1      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	77fb      	strb	r3, [r7, #31]
 8003bf2:	e0ee      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	77fb      	strb	r3, [r7, #31]
 8003bf8:	e0eb      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e0e8      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c00:	2310      	movs	r3, #16
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e0e5      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a57      	ldr	r2, [pc, #348]	; (8003d68 <UART_SetConfig+0x2dc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d120      	bne.n	8003c52 <UART_SetConfig+0x1c6>
 8003c10:	4b52      	ldr	r3, [pc, #328]	; (8003d5c <UART_SetConfig+0x2d0>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c1c:	d013      	beq.n	8003c46 <UART_SetConfig+0x1ba>
 8003c1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c20:	d814      	bhi.n	8003c4c <UART_SetConfig+0x1c0>
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d009      	beq.n	8003c3a <UART_SetConfig+0x1ae>
 8003c26:	2b80      	cmp	r3, #128	; 0x80
 8003c28:	d810      	bhi.n	8003c4c <UART_SetConfig+0x1c0>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <UART_SetConfig+0x1a8>
 8003c2e:	2b40      	cmp	r3, #64	; 0x40
 8003c30:	d006      	beq.n	8003c40 <UART_SetConfig+0x1b4>
 8003c32:	e00b      	b.n	8003c4c <UART_SetConfig+0x1c0>
 8003c34:	2300      	movs	r3, #0
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	e0cb      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	77fb      	strb	r3, [r7, #31]
 8003c3e:	e0c8      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c40:	2304      	movs	r3, #4
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e0c5      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c46:	2308      	movs	r3, #8
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e0c2      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e0bf      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a45      	ldr	r2, [pc, #276]	; (8003d6c <UART_SetConfig+0x2e0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d125      	bne.n	8003ca8 <UART_SetConfig+0x21c>
 8003c5c:	4b3f      	ldr	r3, [pc, #252]	; (8003d5c <UART_SetConfig+0x2d0>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c6a:	d017      	beq.n	8003c9c <UART_SetConfig+0x210>
 8003c6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c70:	d817      	bhi.n	8003ca2 <UART_SetConfig+0x216>
 8003c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c76:	d00b      	beq.n	8003c90 <UART_SetConfig+0x204>
 8003c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7c:	d811      	bhi.n	8003ca2 <UART_SetConfig+0x216>
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <UART_SetConfig+0x1fe>
 8003c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c86:	d006      	beq.n	8003c96 <UART_SetConfig+0x20a>
 8003c88:	e00b      	b.n	8003ca2 <UART_SetConfig+0x216>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	77fb      	strb	r3, [r7, #31]
 8003c8e:	e0a0      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c90:	2302      	movs	r3, #2
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e09d      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c96:	2304      	movs	r3, #4
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e09a      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e097      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e094      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a30      	ldr	r2, [pc, #192]	; (8003d70 <UART_SetConfig+0x2e4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d125      	bne.n	8003cfe <UART_SetConfig+0x272>
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	; (8003d5c <UART_SetConfig+0x2d0>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc0:	d017      	beq.n	8003cf2 <UART_SetConfig+0x266>
 8003cc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc6:	d817      	bhi.n	8003cf8 <UART_SetConfig+0x26c>
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ccc:	d00b      	beq.n	8003ce6 <UART_SetConfig+0x25a>
 8003cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd2:	d811      	bhi.n	8003cf8 <UART_SetConfig+0x26c>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <UART_SetConfig+0x254>
 8003cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cdc:	d006      	beq.n	8003cec <UART_SetConfig+0x260>
 8003cde:	e00b      	b.n	8003cf8 <UART_SetConfig+0x26c>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	77fb      	strb	r3, [r7, #31]
 8003ce4:	e075      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	77fb      	strb	r3, [r7, #31]
 8003cea:	e072      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003cec:	2304      	movs	r3, #4
 8003cee:	77fb      	strb	r3, [r7, #31]
 8003cf0:	e06f      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	77fb      	strb	r3, [r7, #31]
 8003cf6:	e06c      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	77fb      	strb	r3, [r7, #31]
 8003cfc:	e069      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <UART_SetConfig+0x2e8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d137      	bne.n	8003d78 <UART_SetConfig+0x2ec>
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <UART_SetConfig+0x2d0>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d16:	d017      	beq.n	8003d48 <UART_SetConfig+0x2bc>
 8003d18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d1c:	d817      	bhi.n	8003d4e <UART_SetConfig+0x2c2>
 8003d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d22:	d00b      	beq.n	8003d3c <UART_SetConfig+0x2b0>
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d28:	d811      	bhi.n	8003d4e <UART_SetConfig+0x2c2>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <UART_SetConfig+0x2aa>
 8003d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d32:	d006      	beq.n	8003d42 <UART_SetConfig+0x2b6>
 8003d34:	e00b      	b.n	8003d4e <UART_SetConfig+0x2c2>
 8003d36:	2300      	movs	r3, #0
 8003d38:	77fb      	strb	r3, [r7, #31]
 8003d3a:	e04a      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e047      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003d42:	2304      	movs	r3, #4
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e044      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e041      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003d4e:	2310      	movs	r3, #16
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e03e      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003d54:	efff69f3 	.word	0xefff69f3
 8003d58:	40011000 	.word	0x40011000
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40004400 	.word	0x40004400
 8003d64:	40004800 	.word	0x40004800
 8003d68:	40004c00 	.word	0x40004c00
 8003d6c:	40005000 	.word	0x40005000
 8003d70:	40011400 	.word	0x40011400
 8003d74:	40007800 	.word	0x40007800
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a71      	ldr	r2, [pc, #452]	; (8003f44 <UART_SetConfig+0x4b8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d125      	bne.n	8003dce <UART_SetConfig+0x342>
 8003d82:	4b71      	ldr	r3, [pc, #452]	; (8003f48 <UART_SetConfig+0x4bc>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d90:	d017      	beq.n	8003dc2 <UART_SetConfig+0x336>
 8003d92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d96:	d817      	bhi.n	8003dc8 <UART_SetConfig+0x33c>
 8003d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9c:	d00b      	beq.n	8003db6 <UART_SetConfig+0x32a>
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d811      	bhi.n	8003dc8 <UART_SetConfig+0x33c>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0x324>
 8003da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dac:	d006      	beq.n	8003dbc <UART_SetConfig+0x330>
 8003dae:	e00b      	b.n	8003dc8 <UART_SetConfig+0x33c>
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
 8003db4:	e00d      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003db6:	2302      	movs	r3, #2
 8003db8:	77fb      	strb	r3, [r7, #31]
 8003dba:	e00a      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e007      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e004      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e001      	b.n	8003dd2 <UART_SetConfig+0x346>
 8003dce:	2310      	movs	r3, #16
 8003dd0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dda:	d15a      	bne.n	8003e92 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003ddc:	7ffb      	ldrb	r3, [r7, #31]
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d827      	bhi.n	8003e32 <UART_SetConfig+0x3a6>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0x35c>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e15 	.word	0x08003e15
 8003df0:	08003e1d 	.word	0x08003e1d
 8003df4:	08003e33 	.word	0x08003e33
 8003df8:	08003e23 	.word	0x08003e23
 8003dfc:	08003e33 	.word	0x08003e33
 8003e00:	08003e33 	.word	0x08003e33
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	08003e2b 	.word	0x08003e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e0c:	f7fe fbac 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8003e10:	61b8      	str	r0, [r7, #24]
        break;
 8003e12:	e013      	b.n	8003e3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e14:	f7fe fbbc 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8003e18:	61b8      	str	r0, [r7, #24]
        break;
 8003e1a:	e00f      	b.n	8003e3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e1c:	4b4b      	ldr	r3, [pc, #300]	; (8003f4c <UART_SetConfig+0x4c0>)
 8003e1e:	61bb      	str	r3, [r7, #24]
        break;
 8003e20:	e00c      	b.n	8003e3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e22:	f7fe fadf 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 8003e26:	61b8      	str	r0, [r7, #24]
        break;
 8003e28:	e008      	b.n	8003e3c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2e:	61bb      	str	r3, [r7, #24]
        break;
 8003e30:	e004      	b.n	8003e3c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	77bb      	strb	r3, [r7, #30]
        break;
 8003e3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d074      	beq.n	8003f2c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	005a      	lsls	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b0f      	cmp	r3, #15
 8003e5c:	d916      	bls.n	8003e8c <UART_SetConfig+0x400>
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e64:	d212      	bcs.n	8003e8c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f023 030f 	bic.w	r3, r3, #15
 8003e6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	89fa      	ldrh	r2, [r7, #14]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	e04f      	b.n	8003f2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	77bb      	strb	r3, [r7, #30]
 8003e90:	e04c      	b.n	8003f2c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d828      	bhi.n	8003eea <UART_SetConfig+0x45e>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0x414>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003ec5 	.word	0x08003ec5
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	08003eeb 	.word	0x08003eeb
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003eeb 	.word	0x08003eeb
 8003eb8:	08003eeb 	.word	0x08003eeb
 8003ebc:	08003eeb 	.word	0x08003eeb
 8003ec0:	08003ee3 	.word	0x08003ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec4:	f7fe fb50 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8003ec8:	61b8      	str	r0, [r7, #24]
        break;
 8003eca:	e013      	b.n	8003ef4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ecc:	f7fe fb60 	bl	8002590 <HAL_RCC_GetPCLK2Freq>
 8003ed0:	61b8      	str	r0, [r7, #24]
        break;
 8003ed2:	e00f      	b.n	8003ef4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <UART_SetConfig+0x4c0>)
 8003ed6:	61bb      	str	r3, [r7, #24]
        break;
 8003ed8:	e00c      	b.n	8003ef4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eda:	f7fe fa83 	bl	80023e4 <HAL_RCC_GetSysClockFreq>
 8003ede:	61b8      	str	r0, [r7, #24]
        break;
 8003ee0:	e008      	b.n	8003ef4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee6:	61bb      	str	r3, [r7, #24]
        break;
 8003ee8:	e004      	b.n	8003ef4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ef2:	bf00      	nop
    }

    if (pclk != 0U)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d018      	beq.n	8003f2c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	085a      	lsrs	r2, r3, #1
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	441a      	add	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	2b0f      	cmp	r3, #15
 8003f12:	d909      	bls.n	8003f28 <UART_SetConfig+0x49c>
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1a:	d205      	bcs.n	8003f28 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	e001      	b.n	8003f2c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f38:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40007c00 	.word	0x40007c00
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00a      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00a      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00a      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00a      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404e:	d10a      	bne.n	8004066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af02      	add	r7, sp, #8
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a4:	f7fd fa90 	bl	80015c8 <HAL_GetTick>
 80040a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d10e      	bne.n	80040d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f817 	bl	80040fa <UART_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e00d      	b.n	80040f2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b09c      	sub	sp, #112	; 0x70
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800410a:	e0a5      	b.n	8004258 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	f000 80a1 	beq.w	8004258 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fd fa57 	bl	80015c8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <UART_WaitOnFlagUntilTimeout+0x32>
 8004126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004128:	2b00      	cmp	r3, #0
 800412a:	d13e      	bne.n	80041aa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800413a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004140:	667b      	str	r3, [r7, #100]	; 0x64
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800414a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800414c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004158:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e6      	bne.n	800412c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	663b      	str	r3, [r7, #96]	; 0x60
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800417e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800418c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e067      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d04f      	beq.n	8004258 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c6:	d147      	bne.n	8004258 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
 80041f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3308      	adds	r3, #8
 800420a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	613b      	str	r3, [r7, #16]
   return(result);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	66bb      	str	r3, [r7, #104]	; 0x68
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004224:	623a      	str	r2, [r7, #32]
 8004226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	69f9      	ldr	r1, [r7, #28]
 800422a:	6a3a      	ldr	r2, [r7, #32]
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	61bb      	str	r3, [r7, #24]
   return(result);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e010      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	4013      	ands	r3, r2
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	79fb      	ldrb	r3, [r7, #7]
 8004272:	429a      	cmp	r2, r3
 8004274:	f43f af4a 	beq.w	800410c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3770      	adds	r7, #112	; 0x70
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <atoi>:
 8004282:	220a      	movs	r2, #10
 8004284:	2100      	movs	r1, #0
 8004286:	f000 b8b7 	b.w	80043f8 <strtol>
	...

0800428c <__errno>:
 800428c:	4b01      	ldr	r3, [pc, #4]	; (8004294 <__errno+0x8>)
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000028 	.word	0x20000028

08004298 <__libc_init_array>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4d0d      	ldr	r5, [pc, #52]	; (80042d0 <__libc_init_array+0x38>)
 800429c:	4c0d      	ldr	r4, [pc, #52]	; (80042d4 <__libc_init_array+0x3c>)
 800429e:	1b64      	subs	r4, r4, r5
 80042a0:	10a4      	asrs	r4, r4, #2
 80042a2:	2600      	movs	r6, #0
 80042a4:	42a6      	cmp	r6, r4
 80042a6:	d109      	bne.n	80042bc <__libc_init_array+0x24>
 80042a8:	4d0b      	ldr	r5, [pc, #44]	; (80042d8 <__libc_init_array+0x40>)
 80042aa:	4c0c      	ldr	r4, [pc, #48]	; (80042dc <__libc_init_array+0x44>)
 80042ac:	f000 f8ae 	bl	800440c <_init>
 80042b0:	1b64      	subs	r4, r4, r5
 80042b2:	10a4      	asrs	r4, r4, #2
 80042b4:	2600      	movs	r6, #0
 80042b6:	42a6      	cmp	r6, r4
 80042b8:	d105      	bne.n	80042c6 <__libc_init_array+0x2e>
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c0:	4798      	blx	r3
 80042c2:	3601      	adds	r6, #1
 80042c4:	e7ee      	b.n	80042a4 <__libc_init_array+0xc>
 80042c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ca:	4798      	blx	r3
 80042cc:	3601      	adds	r6, #1
 80042ce:	e7f2      	b.n	80042b6 <__libc_init_array+0x1e>
 80042d0:	080045e0 	.word	0x080045e0
 80042d4:	080045e0 	.word	0x080045e0
 80042d8:	080045e0 	.word	0x080045e0
 80042dc:	080045e4 	.word	0x080045e4

080042e0 <memset>:
 80042e0:	4402      	add	r2, r0
 80042e2:	4603      	mov	r3, r0
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d100      	bne.n	80042ea <memset+0xa>
 80042e8:	4770      	bx	lr
 80042ea:	f803 1b01 	strb.w	r1, [r3], #1
 80042ee:	e7f9      	b.n	80042e4 <memset+0x4>

080042f0 <_strtol_l.isra.0>:
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f6:	d001      	beq.n	80042fc <_strtol_l.isra.0+0xc>
 80042f8:	2b24      	cmp	r3, #36	; 0x24
 80042fa:	d906      	bls.n	800430a <_strtol_l.isra.0+0x1a>
 80042fc:	f7ff ffc6 	bl	800428c <__errno>
 8004300:	2316      	movs	r3, #22
 8004302:	6003      	str	r3, [r0, #0]
 8004304:	2000      	movs	r0, #0
 8004306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430a:	4f3a      	ldr	r7, [pc, #232]	; (80043f4 <_strtol_l.isra.0+0x104>)
 800430c:	468e      	mov	lr, r1
 800430e:	4676      	mov	r6, lr
 8004310:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004314:	5de5      	ldrb	r5, [r4, r7]
 8004316:	f015 0508 	ands.w	r5, r5, #8
 800431a:	d1f8      	bne.n	800430e <_strtol_l.isra.0+0x1e>
 800431c:	2c2d      	cmp	r4, #45	; 0x2d
 800431e:	d134      	bne.n	800438a <_strtol_l.isra.0+0x9a>
 8004320:	f89e 4000 	ldrb.w	r4, [lr]
 8004324:	f04f 0801 	mov.w	r8, #1
 8004328:	f106 0e02 	add.w	lr, r6, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05c      	beq.n	80043ea <_strtol_l.isra.0+0xfa>
 8004330:	2b10      	cmp	r3, #16
 8004332:	d10c      	bne.n	800434e <_strtol_l.isra.0+0x5e>
 8004334:	2c30      	cmp	r4, #48	; 0x30
 8004336:	d10a      	bne.n	800434e <_strtol_l.isra.0+0x5e>
 8004338:	f89e 4000 	ldrb.w	r4, [lr]
 800433c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004340:	2c58      	cmp	r4, #88	; 0x58
 8004342:	d14d      	bne.n	80043e0 <_strtol_l.isra.0+0xf0>
 8004344:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004348:	2310      	movs	r3, #16
 800434a:	f10e 0e02 	add.w	lr, lr, #2
 800434e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004352:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004356:	2600      	movs	r6, #0
 8004358:	fbbc f9f3 	udiv	r9, ip, r3
 800435c:	4635      	mov	r5, r6
 800435e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004362:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004366:	2f09      	cmp	r7, #9
 8004368:	d818      	bhi.n	800439c <_strtol_l.isra.0+0xac>
 800436a:	463c      	mov	r4, r7
 800436c:	42a3      	cmp	r3, r4
 800436e:	dd24      	ble.n	80043ba <_strtol_l.isra.0+0xca>
 8004370:	2e00      	cmp	r6, #0
 8004372:	db1f      	blt.n	80043b4 <_strtol_l.isra.0+0xc4>
 8004374:	45a9      	cmp	r9, r5
 8004376:	d31d      	bcc.n	80043b4 <_strtol_l.isra.0+0xc4>
 8004378:	d101      	bne.n	800437e <_strtol_l.isra.0+0x8e>
 800437a:	45a2      	cmp	sl, r4
 800437c:	db1a      	blt.n	80043b4 <_strtol_l.isra.0+0xc4>
 800437e:	fb05 4503 	mla	r5, r5, r3, r4
 8004382:	2601      	movs	r6, #1
 8004384:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004388:	e7eb      	b.n	8004362 <_strtol_l.isra.0+0x72>
 800438a:	2c2b      	cmp	r4, #43	; 0x2b
 800438c:	bf08      	it	eq
 800438e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004392:	46a8      	mov	r8, r5
 8004394:	bf08      	it	eq
 8004396:	f106 0e02 	addeq.w	lr, r6, #2
 800439a:	e7c7      	b.n	800432c <_strtol_l.isra.0+0x3c>
 800439c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80043a0:	2f19      	cmp	r7, #25
 80043a2:	d801      	bhi.n	80043a8 <_strtol_l.isra.0+0xb8>
 80043a4:	3c37      	subs	r4, #55	; 0x37
 80043a6:	e7e1      	b.n	800436c <_strtol_l.isra.0+0x7c>
 80043a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80043ac:	2f19      	cmp	r7, #25
 80043ae:	d804      	bhi.n	80043ba <_strtol_l.isra.0+0xca>
 80043b0:	3c57      	subs	r4, #87	; 0x57
 80043b2:	e7db      	b.n	800436c <_strtol_l.isra.0+0x7c>
 80043b4:	f04f 36ff 	mov.w	r6, #4294967295
 80043b8:	e7e4      	b.n	8004384 <_strtol_l.isra.0+0x94>
 80043ba:	2e00      	cmp	r6, #0
 80043bc:	da05      	bge.n	80043ca <_strtol_l.isra.0+0xda>
 80043be:	2322      	movs	r3, #34	; 0x22
 80043c0:	6003      	str	r3, [r0, #0]
 80043c2:	4665      	mov	r5, ip
 80043c4:	b942      	cbnz	r2, 80043d8 <_strtol_l.isra.0+0xe8>
 80043c6:	4628      	mov	r0, r5
 80043c8:	e79d      	b.n	8004306 <_strtol_l.isra.0+0x16>
 80043ca:	f1b8 0f00 	cmp.w	r8, #0
 80043ce:	d000      	beq.n	80043d2 <_strtol_l.isra.0+0xe2>
 80043d0:	426d      	negs	r5, r5
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	d0f7      	beq.n	80043c6 <_strtol_l.isra.0+0xd6>
 80043d6:	b10e      	cbz	r6, 80043dc <_strtol_l.isra.0+0xec>
 80043d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80043dc:	6011      	str	r1, [r2, #0]
 80043de:	e7f2      	b.n	80043c6 <_strtol_l.isra.0+0xd6>
 80043e0:	2430      	movs	r4, #48	; 0x30
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1b3      	bne.n	800434e <_strtol_l.isra.0+0x5e>
 80043e6:	2308      	movs	r3, #8
 80043e8:	e7b1      	b.n	800434e <_strtol_l.isra.0+0x5e>
 80043ea:	2c30      	cmp	r4, #48	; 0x30
 80043ec:	d0a4      	beq.n	8004338 <_strtol_l.isra.0+0x48>
 80043ee:	230a      	movs	r3, #10
 80043f0:	e7ad      	b.n	800434e <_strtol_l.isra.0+0x5e>
 80043f2:	bf00      	nop
 80043f4:	080044d5 	.word	0x080044d5

080043f8 <strtol>:
 80043f8:	4613      	mov	r3, r2
 80043fa:	460a      	mov	r2, r1
 80043fc:	4601      	mov	r1, r0
 80043fe:	4802      	ldr	r0, [pc, #8]	; (8004408 <strtol+0x10>)
 8004400:	6800      	ldr	r0, [r0, #0]
 8004402:	f7ff bf75 	b.w	80042f0 <_strtol_l.isra.0>
 8004406:	bf00      	nop
 8004408:	20000028 	.word	0x20000028

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
